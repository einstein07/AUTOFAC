// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robogen.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "robogen.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace robogenMessage {

namespace {

const ::google::protobuf::Descriptor* EvolvableParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvolvableParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* BodyConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BodyConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Body_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Body_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeuralConnection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeuralConnection_reflection_ = NULL;
const ::google::protobuf::Descriptor* Neuron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Neuron_reflection_ = NULL;
const ::google::protobuf::Descriptor* Brain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Brain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Robot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Robot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Obstacle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Obstacle_reflection_ = NULL;
const ::google::protobuf::Descriptor* LightSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Resource_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulatorConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimulatorConf_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvaluationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvaluationRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EvaluationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EvaluationResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_robogen_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_robogen_2eproto() {
  protobuf_AddDesc_robogen_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "robogen.proto");
  GOOGLE_CHECK(file != NULL);
  EvolvableParameter_descriptor_ = file->message_type(0);
  static const int EvolvableParameter_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, paramvalue_),
  };
  EvolvableParameter_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EvolvableParameter_descriptor_,
      EvolvableParameter::default_instance_,
      EvolvableParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _has_bits_[0]),
      -1,
      -1,
      sizeof(EvolvableParameter),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvolvableParameter, _internal_metadata_),
      -1);
  BodyPart_descriptor_ = file->message_type(1);
  static const int BodyPart_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, root_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, evolvableparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, orientation_),
  };
  BodyPart_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BodyPart_descriptor_,
      BodyPart::default_instance_,
      BodyPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _has_bits_[0]),
      -1,
      -1,
      sizeof(BodyPart),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyPart, _internal_metadata_),
      -1);
  BodyConnection_descriptor_ = file->message_type(2);
  static const int BodyConnection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, srcslot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, destslot_),
  };
  BodyConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BodyConnection_descriptor_,
      BodyConnection::default_instance_,
      BodyConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _has_bits_[0]),
      -1,
      -1,
      sizeof(BodyConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BodyConnection, _internal_metadata_),
      -1);
  Body_descriptor_ = file->message_type(3);
  static const int Body_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, part_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, connection_),
  };
  Body_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Body_descriptor_,
      Body::default_instance_,
      Body_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _has_bits_[0]),
      -1,
      -1,
      sizeof(Body),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Body, _internal_metadata_),
      -1);
  NeuralConnection_descriptor_ = file->message_type(4);
  static const int NeuralConnection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, weight_),
  };
  NeuralConnection_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NeuralConnection_descriptor_,
      NeuralConnection::default_instance_,
      NeuralConnection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _has_bits_[0]),
      -1,
      -1,
      sizeof(NeuralConnection),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeuralConnection, _internal_metadata_),
      -1);
  Neuron_descriptor_ = file->message_type(5);
  static const int Neuron_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, bodypartid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, ioid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, tau_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, phaseoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, gain_),
  };
  Neuron_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Neuron_descriptor_,
      Neuron::default_instance_,
      Neuron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _has_bits_[0]),
      -1,
      -1,
      sizeof(Neuron),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Neuron, _internal_metadata_),
      -1);
  Brain_descriptor_ = file->message_type(6);
  static const int Brain_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, neuron_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, connection_),
  };
  Brain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Brain_descriptor_,
      Brain::default_instance_,
      Brain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _has_bits_[0]),
      -1,
      -1,
      sizeof(Brain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Brain, _internal_metadata_),
      -1);
  Robot_descriptor_ = file->message_type(7);
  static const int Robot_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, brain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, complexity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, complexitycost_),
  };
  Robot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Robot_descriptor_,
      Robot::default_instance_,
      Robot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_[0]),
      -1,
      -1,
      sizeof(Robot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _internal_metadata_),
      -1);
  Obstacle_descriptor_ = file->message_type(8);
  static const int Obstacle_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, zsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, xrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, yrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, zrotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, rotationangle_),
  };
  Obstacle_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Obstacle_descriptor_,
      Obstacle::default_instance_,
      Obstacle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _has_bits_[0]),
      -1,
      -1,
      sizeof(Obstacle),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacle, _internal_metadata_),
      -1);
  LightSource_descriptor_ = file->message_type(9);
  static const int LightSource_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, intensity_),
  };
  LightSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LightSource_descriptor_,
      LightSource::default_instance_,
      LightSource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, _has_bits_[0]),
      -1,
      -1,
      sizeof(LightSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightSource, _internal_metadata_),
      -1);
  StartPosition_descriptor_ = file->message_type(10);
  static const int StartPosition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, azimuth_),
  };
  StartPosition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartPosition_descriptor_,
      StartPosition::default_instance_,
      StartPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, _has_bits_[0]),
      -1,
      -1,
      sizeof(StartPosition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartPosition, _internal_metadata_),
      -1);
  Resource_descriptor_ = file->message_type(11);
  static const int Resource_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, zsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, pushingrobots_),
  };
  Resource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Resource_descriptor_,
      Resource::default_instance_,
      Resource_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _has_bits_[0]),
      -1,
      -1,
      sizeof(Resource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Resource, _internal_metadata_),
      -1);
  SimulatorConf_descriptor_ = file->message_type(12);
  static const int SimulatorConf_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, obstacles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, scenario_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, lightsources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, timestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, ntimesteps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, startpositions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, actuationperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainfriction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, sensornoiselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, motornoiselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, capacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxlinearacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxangularacceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, maxdirectionshiftspersecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gravityx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gravityy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gravityz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terraintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, terrainheightfieldfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, disallowobstaclecollisions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, obstacleoverlappolicy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzonex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzonez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzonesizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzonesizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, gatheringzonesizez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, swarmsize_),
  };
  SimulatorConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimulatorConf_descriptor_,
      SimulatorConf::default_instance_,
      SimulatorConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(SimulatorConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulatorConf, _internal_metadata_),
      -1);
  EvaluationRequest_descriptor_ = file->message_type(13);
  static const int EvaluationRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, robot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, configuration_),
  };
  EvaluationRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EvaluationRequest_descriptor_,
      EvaluationRequest::default_instance_,
      EvaluationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(EvaluationRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationRequest, _internal_metadata_),
      -1);
  EvaluationResult_descriptor_ = file->message_type(14);
  static const int EvaluationResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, fitness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, objectives_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, endposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, endposy_),
  };
  EvaluationResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EvaluationResult_descriptor_,
      EvaluationResult::default_instance_,
      EvaluationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(EvaluationResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EvaluationResult, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_robogen_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EvolvableParameter_descriptor_, &EvolvableParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BodyPart_descriptor_, &BodyPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BodyConnection_descriptor_, &BodyConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Body_descriptor_, &Body::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NeuralConnection_descriptor_, &NeuralConnection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Neuron_descriptor_, &Neuron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Brain_descriptor_, &Brain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Robot_descriptor_, &Robot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Obstacle_descriptor_, &Obstacle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LightSource_descriptor_, &LightSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartPosition_descriptor_, &StartPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Resource_descriptor_, &Resource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimulatorConf_descriptor_, &SimulatorConf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EvaluationRequest_descriptor_, &EvaluationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EvaluationResult_descriptor_, &EvaluationResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_robogen_2eproto() {
  delete EvolvableParameter::default_instance_;
  delete EvolvableParameter_reflection_;
  delete BodyPart::default_instance_;
  delete BodyPart_reflection_;
  delete BodyConnection::default_instance_;
  delete BodyConnection_reflection_;
  delete Body::default_instance_;
  delete Body_reflection_;
  delete NeuralConnection::default_instance_;
  delete NeuralConnection_reflection_;
  delete Neuron::default_instance_;
  delete Neuron_reflection_;
  delete Brain::default_instance_;
  delete Brain_reflection_;
  delete Robot::default_instance_;
  delete Robot_reflection_;
  delete Obstacle::default_instance_;
  delete Obstacle_reflection_;
  delete LightSource::default_instance_;
  delete LightSource_reflection_;
  delete StartPosition::default_instance_;
  delete StartPosition_reflection_;
  delete Resource::default_instance_;
  delete Resource_reflection_;
  delete SimulatorConf::default_instance_;
  delete SimulatorConf_reflection_;
  delete EvaluationRequest::default_instance_;
  delete EvaluationRequest_reflection_;
  delete EvaluationResult::default_instance_;
  delete EvaluationResult_reflection_;
}

void protobuf_AddDesc_robogen_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_robogen_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrobogen.proto\022\016robogenMessage\"(\n\022Evolv"
    "ableParameter\022\022\n\nparamValue\030\001 \002(\002\"\203\001\n\010Bo"
    "dyPart\022\n\n\002id\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\022\014\n\004root"
    "\030\003 \002(\010\022:\n\016evolvableParam\030\004 \003(\0132\".robogen"
    "Message.EvolvableParameter\022\023\n\013orientatio"
    "n\030\005 \002(\005\"N\n\016BodyConnection\022\013\n\003src\030\001 \002(\t\022\014"
    "\n\004dest\030\002 \002(\t\022\017\n\007srcSlot\030\003 \002(\005\022\020\n\010destSlo"
    "t\030\004 \002(\005\"b\n\004Body\022&\n\004part\030\001 \003(\0132\030.robogenM"
    "essage.BodyPart\0222\n\nconnection\030\002 \003(\0132\036.ro"
    "bogenMessage.BodyConnection\"=\n\020NeuralCon"
    "nection\022\013\n\003src\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022\016\n\006we"
    "ight\030\003 \002(\002\"\241\001\n\006Neuron\022\n\n\002id\030\001 \002(\t\022\r\n\005lay"
    "er\030\002 \002(\t\022\014\n\004type\030\003 \002(\t\022\014\n\004bias\030\004 \001(\002\022\022\n\n"
    "bodyPartId\030\005 \001(\t\022\014\n\004ioId\030\006 \001(\005\022\013\n\003tau\030\007 "
    "\001(\002\022\023\n\013phaseOffset\030\010 \001(\002\022\016\n\006period\030\t \001(\002"
    "\022\014\n\004gain\030\n \001(\002\"e\n\005Brain\022&\n\006neuron\030\001 \003(\0132"
    "\026.robogenMessage.Neuron\0224\n\nconnection\030\002 "
    "\003(\0132 .robogenMessage.NeuralConnection\"\211\001"
    "\n\005Robot\022\n\n\002id\030\001 \002(\005\022\"\n\004body\030\002 \002(\0132\024.robo"
    "genMessage.Body\022$\n\005brain\030\003 \002(\0132\025.robogen"
    "Message.Brain\022\022\n\ncomplexity\030\004 \002(\002\022\026\n\016com"
    "plexityCost\030\005 \002(\002\"\271\001\n\010Obstacle\022\t\n\001x\030\001 \002("
    "\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\022\r\n\005xSize\030\004 \002(\002\022\r"
    "\n\005ySize\030\005 \002(\002\022\r\n\005zSize\030\006 \002(\002\022\017\n\007density\030"
    "\007 \002(\002\022\021\n\txRotation\030\010 \002(\002\022\021\n\tyRotation\030\t "
    "\002(\002\022\021\n\tzRotation\030\n \002(\002\022\025\n\rrotationAngle\030"
    "\013 \002(\002\"A\n\013LightSource\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002"
    "(\002\022\t\n\001z\030\003 \002(\002\022\021\n\tintensity\030\007 \002(\002\"6\n\rStar"
    "tPosition\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\017\n\007azimu"
    "th\030\003 \002(\002\"\200\001\n\010Resource\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 "
    "\002(\002\022\t\n\001z\030\003 \002(\002\022\r\n\005xSize\030\004 \002(\002\022\r\n\005ySize\030\005"
    " \002(\002\022\r\n\005zSize\030\006 \002(\002\022\017\n\007density\030\007 \002(\002\022\025\n\r"
    "pushingRobots\030\010 \002(\002\"\222\007\n\rSimulatorConf\022\024\n"
    "\014terrainWidth\030\001 \002(\002\022\025\n\rterrainLength\030\002 \002"
    "(\002\022+\n\tobstacles\030\003 \003(\0132\030.robogenMessage.O"
    "bstacle\022\020\n\010scenario\030\004 \002(\t\0221\n\014lightSource"
    "s\030\005 \003(\0132\033.robogenMessage.LightSource\022\020\n\010"
    "timeStep\030\006 \002(\002\022\022\n\nnTimeSteps\030\007 \002(\005\0225\n\016st"
    "artPositions\030\010 \003(\0132\035.robogenMessage.Star"
    "tPosition\022\027\n\017actuationPeriod\030\t \002(\005\022\027\n\017te"
    "rrainFriction\030\n \002(\002\022\030\n\020sensorNoiseLevel\030"
    "\013 \002(\002\022\027\n\017motorNoiseLevel\030\014 \002(\002\022\027\n\017capAcc"
    "eleration\030\r \002(\010\022\035\n\025maxLinearAcceleration"
    "\030\016 \002(\002\022\036\n\026maxAngularAcceleration\030\017 \002(\002\022#"
    "\n\033maxDirectionShiftsPerSecond\030\020 \002(\005\022\020\n\010g"
    "ravityX\030\021 \002(\002\022\020\n\010gravityY\030\022 \002(\002\022\020\n\010gravi"
    "tyZ\030\023 \002(\002\022\023\n\013terrainType\030\024 \002(\005\022\025\n\rterrai"
    "nHeight\030\025 \002(\002\022\"\n\032terrainHeightFieldFileN"
    "ame\030\026 \002(\t\022\"\n\032disallowObstacleCollisions\030"
    "\027 \002(\010\022\035\n\025obstacleOverlapPolicy\030\030 \002(\r\022\026\n\016"
    "gatheringZoneX\030\031 \002(\002\022\026\n\016gatheringZoneY\030\032"
    " \002(\002\022\026\n\016gatheringZoneZ\030\033 \002(\002\022\032\n\022gatherin"
    "gZoneSizeX\030\034 \002(\002\022\032\n\022gatheringZoneSizeY\030\035"
    " \002(\002\022\032\n\022gatheringZoneSizeZ\030\036 \002(\002\022+\n\treso"
    "urces\030\037 \003(\0132\030.robogenMessage.Resource\022\021\n"
    "\tswarmSize\030  \002(\005\"o\n\021EvaluationRequest\022$\n"
    "\005robot\030\001 \002(\0132\025.robogenMessage.Robot\0224\n\rc"
    "onfiguration\030\002 \002(\0132\035.robogenMessage.Simu"
    "latorConf\"e\n\020EvaluationResult\022\n\n\002id\030\001 \002("
    "\005\022\017\n\007fitness\030\002 \002(\002\022\022\n\nobjectives\030\003 \003(\002\022\017"
    "\n\007endPosX\030\004 \002(\002\022\017\n\007endPosY\030\005 \002(\002", 2432);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "robogen.proto", &protobuf_RegisterTypes);
  EvolvableParameter::default_instance_ = new EvolvableParameter();
  BodyPart::default_instance_ = new BodyPart();
  BodyConnection::default_instance_ = new BodyConnection();
  Body::default_instance_ = new Body();
  NeuralConnection::default_instance_ = new NeuralConnection();
  Neuron::default_instance_ = new Neuron();
  Brain::default_instance_ = new Brain();
  Robot::default_instance_ = new Robot();
  Obstacle::default_instance_ = new Obstacle();
  LightSource::default_instance_ = new LightSource();
  StartPosition::default_instance_ = new StartPosition();
  Resource::default_instance_ = new Resource();
  SimulatorConf::default_instance_ = new SimulatorConf();
  EvaluationRequest::default_instance_ = new EvaluationRequest();
  EvaluationResult::default_instance_ = new EvaluationResult();
  EvolvableParameter::default_instance_->InitAsDefaultInstance();
  BodyPart::default_instance_->InitAsDefaultInstance();
  BodyConnection::default_instance_->InitAsDefaultInstance();
  Body::default_instance_->InitAsDefaultInstance();
  NeuralConnection::default_instance_->InitAsDefaultInstance();
  Neuron::default_instance_->InitAsDefaultInstance();
  Brain::default_instance_->InitAsDefaultInstance();
  Robot::default_instance_->InitAsDefaultInstance();
  Obstacle::default_instance_->InitAsDefaultInstance();
  LightSource::default_instance_->InitAsDefaultInstance();
  StartPosition::default_instance_->InitAsDefaultInstance();
  Resource::default_instance_->InitAsDefaultInstance();
  SimulatorConf::default_instance_->InitAsDefaultInstance();
  EvaluationRequest::default_instance_->InitAsDefaultInstance();
  EvaluationResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_robogen_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_robogen_2eproto {
  StaticDescriptorInitializer_robogen_2eproto() {
    protobuf_AddDesc_robogen_2eproto();
  }
} static_descriptor_initializer_robogen_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvolvableParameter::kParamValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvolvableParameter::EvolvableParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvolvableParameter)
}

void EvolvableParameter::InitAsDefaultInstance() {
}

EvolvableParameter::EvolvableParameter(const EvolvableParameter& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvolvableParameter)
}

void EvolvableParameter::SharedCtor() {
  _cached_size_ = 0;
  paramvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvolvableParameter::~EvolvableParameter() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvolvableParameter)
  SharedDtor();
}

void EvolvableParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvolvableParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvolvableParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvolvableParameter_descriptor_;
}

const EvolvableParameter& EvolvableParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvolvableParameter* EvolvableParameter::default_instance_ = NULL;

EvolvableParameter* EvolvableParameter::New(::google::protobuf::Arena* arena) const {
  EvolvableParameter* n = new EvolvableParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvolvableParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvolvableParameter)
  paramvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EvolvableParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvolvableParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float paramValue = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &paramvalue_)));
          set_has_paramvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvolvableParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvolvableParameter)
  return false;
#undef DO_
}

void EvolvableParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvolvableParameter)
  // required float paramValue = 1;
  if (has_paramvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->paramvalue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvolvableParameter)
}

::google::protobuf::uint8* EvolvableParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvolvableParameter)
  // required float paramValue = 1;
  if (has_paramvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->paramvalue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvolvableParameter)
  return target;
}

int EvolvableParameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvolvableParameter)
  int total_size = 0;

  // required float paramValue = 1;
  if (has_paramvalue()) {
    total_size += 1 + 4;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvolvableParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvolvableParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EvolvableParameter* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EvolvableParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvolvableParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvolvableParameter)
    MergeFrom(*source);
  }
}

void EvolvableParameter::MergeFrom(const EvolvableParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvolvableParameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paramvalue()) {
      set_paramvalue(from.paramvalue());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EvolvableParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvolvableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvolvableParameter::CopyFrom(const EvolvableParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvolvableParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvolvableParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EvolvableParameter::Swap(EvolvableParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvolvableParameter::InternalSwap(EvolvableParameter* other) {
  std::swap(paramvalue_, other->paramvalue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvolvableParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvolvableParameter_descriptor_;
  metadata.reflection = EvolvableParameter_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvolvableParameter

// required float paramValue = 1;
bool EvolvableParameter::has_paramvalue() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EvolvableParameter::set_has_paramvalue() {
  _has_bits_[0] |= 0x00000001u;
}
void EvolvableParameter::clear_has_paramvalue() {
  _has_bits_[0] &= ~0x00000001u;
}
void EvolvableParameter::clear_paramvalue() {
  paramvalue_ = 0;
  clear_has_paramvalue();
}
 float EvolvableParameter::paramvalue() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvolvableParameter.paramValue)
  return paramvalue_;
}
 void EvolvableParameter::set_paramvalue(float value) {
  set_has_paramvalue();
  paramvalue_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvolvableParameter.paramValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyPart::kIdFieldNumber;
const int BodyPart::kTypeFieldNumber;
const int BodyPart::kRootFieldNumber;
const int BodyPart::kEvolvableParamFieldNumber;
const int BodyPart::kOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyPart::BodyPart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyPart)
}

void BodyPart::InitAsDefaultInstance() {
}

BodyPart::BodyPart(const BodyPart& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyPart)
}

void BodyPart::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_ = false;
  orientation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyPart::~BodyPart() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyPart)
  SharedDtor();
}

void BodyPart::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BodyPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyPart_descriptor_;
}

const BodyPart& BodyPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

BodyPart* BodyPart::default_instance_ = NULL;

BodyPart* BodyPart::New(::google::protobuf::Arena* arena) const {
  BodyPart* n = new BodyPart;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyPart::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.BodyPart)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BodyPart, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BodyPart*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 23u) {
    ZR_(root_, orientation_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  evolvableparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BodyPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyPart)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyPart.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // required string type = 2;
      case 2: {
        if (tag == 18) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyPart.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_root;
        break;
      }

      // required bool root = 3;
      case 3: {
        if (tag == 24) {
         parse_root:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &root_)));
          set_has_root();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_evolvableParam;
        break;
      }

      // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
      case 4: {
        if (tag == 34) {
         parse_evolvableParam:
          DO_(input->IncrementRecursionDepth());
         parse_loop_evolvableParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_evolvableparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_evolvableParam;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_orientation;
        break;
      }

      // required int32 orientation = 5;
      case 5: {
        if (tag == 40) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyPart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyPart)
  return false;
#undef DO_
}

void BodyPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyPart)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->type(), output);
  }

  // required bool root = 3;
  if (has_root()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->root(), output);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (unsigned int i = 0, n = this->evolvableparam_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->evolvableparam(i), output);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->orientation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyPart)
}

::google::protobuf::uint8* BodyPart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyPart)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyPart.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // required bool root = 3;
  if (has_root()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->root(), target);
  }

  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  for (unsigned int i = 0, n = this->evolvableparam_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->evolvableparam(i), false, target);
  }

  // required int32 orientation = 5;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->orientation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyPart)
  return target;
}

int BodyPart::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.BodyPart)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_type()) {
    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_root()) {
    // required bool root = 3;
    total_size += 1 + 1;
  }

  if (has_orientation()) {
    // required int32 orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orientation());
  }

  return total_size;
}
int BodyPart::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.BodyPart)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required bool root = 3;
    total_size += 1 + 1;

    // required int32 orientation = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->orientation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
  total_size += 1 * this->evolvableparam_size();
  for (int i = 0; i < this->evolvableparam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->evolvableparam(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyPart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.BodyPart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BodyPart* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyPart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.BodyPart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.BodyPart)
    MergeFrom(*source);
  }
}

void BodyPart::MergeFrom(const BodyPart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.BodyPart)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  evolvableparam_.MergeFrom(from.evolvableparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_root()) {
      set_root(from.root());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BodyPart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.BodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyPart::CopyFrom(const BodyPart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.BodyPart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->evolvableparam())) return false;
  return true;
}

void BodyPart::Swap(BodyPart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyPart::InternalSwap(BodyPart* other) {
  id_.Swap(&other->id_);
  type_.Swap(&other->type_);
  std::swap(root_, other->root_);
  evolvableparam_.UnsafeArenaSwap(&other->evolvableparam_);
  std::swap(orientation_, other->orientation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyPart_descriptor_;
  metadata.reflection = BodyPart_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyPart

// required string id = 1;
bool BodyPart::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BodyPart::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BodyPart::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BodyPart::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& BodyPart::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyPart::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.id)
}
 void BodyPart::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyPart.id)
}
 void BodyPart::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyPart.id)
}
 ::std::string* BodyPart::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BodyPart::release_id() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyPart.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyPart::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyPart.id)
}

// required string type = 2;
bool BodyPart::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BodyPart::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void BodyPart::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void BodyPart::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& BodyPart::type() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyPart::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.type)
}
 void BodyPart::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyPart.type)
}
 void BodyPart::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyPart.type)
}
 ::std::string* BodyPart::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BodyPart::release_type() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyPart.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyPart::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyPart.type)
}

// required bool root = 3;
bool BodyPart::has_root() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BodyPart::set_has_root() {
  _has_bits_[0] |= 0x00000004u;
}
void BodyPart::clear_has_root() {
  _has_bits_[0] &= ~0x00000004u;
}
void BodyPart::clear_root() {
  root_ = false;
  clear_has_root();
}
 bool BodyPart::root() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.root)
  return root_;
}
 void BodyPart::set_root(bool value) {
  set_has_root();
  root_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.root)
}

// repeated .robogenMessage.EvolvableParameter evolvableParam = 4;
int BodyPart::evolvableparam_size() const {
  return evolvableparam_.size();
}
void BodyPart::clear_evolvableparam() {
  evolvableparam_.Clear();
}
const ::robogenMessage::EvolvableParameter& BodyPart::evolvableparam(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Get(index);
}
::robogenMessage::EvolvableParameter* BodyPart::mutable_evolvableparam(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Mutable(index);
}
::robogenMessage::EvolvableParameter* BodyPart::add_evolvableparam() {
  // @@protoc_insertion_point(field_add:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >*
BodyPart::mutable_evolvableparam() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.BodyPart.evolvableParam)
  return &evolvableparam_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::EvolvableParameter >&
BodyPart::evolvableparam() const {
  // @@protoc_insertion_point(field_list:robogenMessage.BodyPart.evolvableParam)
  return evolvableparam_;
}

// required int32 orientation = 5;
bool BodyPart::has_orientation() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void BodyPart::set_has_orientation() {
  _has_bits_[0] |= 0x00000010u;
}
void BodyPart::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000010u;
}
void BodyPart::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
 ::google::protobuf::int32 BodyPart::orientation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyPart.orientation)
  return orientation_;
}
 void BodyPart::set_orientation(::google::protobuf::int32 value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyPart.orientation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BodyConnection::kSrcFieldNumber;
const int BodyConnection::kDestFieldNumber;
const int BodyConnection::kSrcSlotFieldNumber;
const int BodyConnection::kDestSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BodyConnection::BodyConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.BodyConnection)
}

void BodyConnection::InitAsDefaultInstance() {
}

BodyConnection::BodyConnection(const BodyConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.BodyConnection)
}

void BodyConnection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcslot_ = 0;
  destslot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BodyConnection::~BodyConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.BodyConnection)
  SharedDtor();
}

void BodyConnection::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BodyConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BodyConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BodyConnection_descriptor_;
}

const BodyConnection& BodyConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

BodyConnection* BodyConnection::default_instance_ = NULL;

BodyConnection* BodyConnection::New(::google::protobuf::Arena* arena) const {
  BodyConnection* n = new BodyConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BodyConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.BodyConnection)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BodyConnection, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BodyConnection*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(srcslot_, destslot_);
    if (has_src()) {
      src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dest()) {
      dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BodyConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.BodyConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyConnection.src");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.BodyConnection.dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_srcSlot;
        break;
      }

      // required int32 srcSlot = 3;
      case 3: {
        if (tag == 24) {
         parse_srcSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srcslot_)));
          set_has_srcslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destSlot;
        break;
      }

      // required int32 destSlot = 4;
      case 4: {
        if (tag == 32) {
         parse_destSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destslot_)));
          set_has_destslot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.BodyConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.BodyConnection)
  return false;
#undef DO_
}

void BodyConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.BodyConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->srcslot(), output);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->destslot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.BodyConnection)
}

::google::protobuf::uint8* BodyConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.BodyConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.BodyConnection.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required int32 srcSlot = 3;
  if (has_srcslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->srcslot(), target);
  }

  // required int32 destSlot = 4;
  if (has_destslot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->destslot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.BodyConnection)
  return target;
}

int BodyConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.BodyConnection)
  int total_size = 0;

  if (has_src()) {
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  if (has_dest()) {
    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  if (has_srcslot()) {
    // required int32 srcSlot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcslot());
  }

  if (has_destslot()) {
    // required int32 destSlot = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destslot());
  }

  return total_size;
}
int BodyConnection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.BodyConnection)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());

    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

    // required int32 srcSlot = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srcslot());

    // required int32 destSlot = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->destslot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BodyConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.BodyConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BodyConnection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BodyConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.BodyConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.BodyConnection)
    MergeFrom(*source);
  }
}

void BodyConnection::MergeFrom(const BodyConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.BodyConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (from.has_dest()) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (from.has_srcslot()) {
      set_srcslot(from.srcslot());
    }
    if (from.has_destslot()) {
      set_destslot(from.destslot());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BodyConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.BodyConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BodyConnection::CopyFrom(const BodyConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.BodyConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BodyConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BodyConnection::Swap(BodyConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BodyConnection::InternalSwap(BodyConnection* other) {
  src_.Swap(&other->src_);
  dest_.Swap(&other->dest_);
  std::swap(srcslot_, other->srcslot_);
  std::swap(destslot_, other->destslot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BodyConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BodyConnection_descriptor_;
  metadata.reflection = BodyConnection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BodyConnection

// required string src = 1;
bool BodyConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BodyConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void BodyConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void BodyConnection::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
 const ::std::string& BodyConnection::src() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.src)
  return src_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyConnection::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.src)
}
 void BodyConnection::set_src(const char* value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyConnection.src)
}
 void BodyConnection::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyConnection.src)
}
 ::std::string* BodyConnection::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyConnection.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BodyConnection::release_src() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyConnection.src)
  clear_has_src();
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyConnection::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyConnection.src)
}

// required string dest = 2;
bool BodyConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BodyConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void BodyConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void BodyConnection::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
 const ::std::string& BodyConnection::dest() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.dest)
  return dest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.dest)
}
 void BodyConnection::set_dest(const char* value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.BodyConnection.dest)
}
 void BodyConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.BodyConnection.dest)
}
 ::std::string* BodyConnection::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:robogenMessage.BodyConnection.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BodyConnection::release_dest() {
  // @@protoc_insertion_point(field_release:robogenMessage.BodyConnection.dest)
  clear_has_dest();
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BodyConnection::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.BodyConnection.dest)
}

// required int32 srcSlot = 3;
bool BodyConnection::has_srcslot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BodyConnection::set_has_srcslot() {
  _has_bits_[0] |= 0x00000004u;
}
void BodyConnection::clear_has_srcslot() {
  _has_bits_[0] &= ~0x00000004u;
}
void BodyConnection::clear_srcslot() {
  srcslot_ = 0;
  clear_has_srcslot();
}
 ::google::protobuf::int32 BodyConnection::srcslot() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.srcSlot)
  return srcslot_;
}
 void BodyConnection::set_srcslot(::google::protobuf::int32 value) {
  set_has_srcslot();
  srcslot_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.srcSlot)
}

// required int32 destSlot = 4;
bool BodyConnection::has_destslot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BodyConnection::set_has_destslot() {
  _has_bits_[0] |= 0x00000008u;
}
void BodyConnection::clear_has_destslot() {
  _has_bits_[0] &= ~0x00000008u;
}
void BodyConnection::clear_destslot() {
  destslot_ = 0;
  clear_has_destslot();
}
 ::google::protobuf::int32 BodyConnection::destslot() const {
  // @@protoc_insertion_point(field_get:robogenMessage.BodyConnection.destSlot)
  return destslot_;
}
 void BodyConnection::set_destslot(::google::protobuf::int32 value) {
  set_has_destslot();
  destslot_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.BodyConnection.destSlot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Body::kPartFieldNumber;
const int Body::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Body::Body()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Body)
}

void Body::InitAsDefaultInstance() {
}

Body::Body(const Body& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Body)
}

void Body::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Body::~Body() {
  // @@protoc_insertion_point(destructor:robogenMessage.Body)
  SharedDtor();
}

void Body::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Body::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Body::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Body_descriptor_;
}

const Body& Body::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Body* Body::default_instance_ = NULL;

Body* Body::New(::google::protobuf::Arena* arena) const {
  Body* n = new Body;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Body::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Body)
  part_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Body::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Body)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.BodyPart part = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_part:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_part()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_part;
        if (input->ExpectTag(18)) goto parse_loop_connection;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .robogenMessage.BodyConnection connection = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_connection;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Body)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Body)
  return false;
#undef DO_
}

void Body::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Body)
  // repeated .robogenMessage.BodyPart part = 1;
  for (unsigned int i = 0, n = this->part_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->part(i), output);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (unsigned int i = 0, n = this->connection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Body)
}

::google::protobuf::uint8* Body::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Body)
  // repeated .robogenMessage.BodyPart part = 1;
  for (unsigned int i = 0, n = this->part_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->part(i), false, target);
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  for (unsigned int i = 0, n = this->connection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->connection(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Body)
  return target;
}

int Body::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Body)
  int total_size = 0;

  // repeated .robogenMessage.BodyPart part = 1;
  total_size += 1 * this->part_size();
  for (int i = 0; i < this->part_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part(i));
  }

  // repeated .robogenMessage.BodyConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Body::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Body* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Body>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Body)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Body)
    MergeFrom(*source);
  }
}

void Body::MergeFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Body)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  part_.MergeFrom(from.part_);
  connection_.MergeFrom(from.connection_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Body::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Body::CopyFrom(const Body& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Body)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Body::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->part())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Body::Swap(Body* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Body::InternalSwap(Body* other) {
  part_.UnsafeArenaSwap(&other->part_);
  connection_.UnsafeArenaSwap(&other->connection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Body::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Body_descriptor_;
  metadata.reflection = Body_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Body

// repeated .robogenMessage.BodyPart part = 1;
int Body::part_size() const {
  return part_.size();
}
void Body::clear_part() {
  part_.Clear();
}
const ::robogenMessage::BodyPart& Body::part(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Body.part)
  return part_.Get(index);
}
::robogenMessage::BodyPart* Body::mutable_part(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Body.part)
  return part_.Mutable(index);
}
::robogenMessage::BodyPart* Body::add_part() {
  // @@protoc_insertion_point(field_add:robogenMessage.Body.part)
  return part_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >*
Body::mutable_part() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Body.part)
  return &part_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyPart >&
Body::part() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Body.part)
  return part_;
}

// repeated .robogenMessage.BodyConnection connection = 2;
int Body::connection_size() const {
  return connection_.size();
}
void Body::clear_connection() {
  connection_.Clear();
}
const ::robogenMessage::BodyConnection& Body::connection(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Body.connection)
  return connection_.Get(index);
}
::robogenMessage::BodyConnection* Body::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Body.connection)
  return connection_.Mutable(index);
}
::robogenMessage::BodyConnection* Body::add_connection() {
  // @@protoc_insertion_point(field_add:robogenMessage.Body.connection)
  return connection_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >*
Body::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Body.connection)
  return &connection_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::BodyConnection >&
Body::connection() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Body.connection)
  return connection_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NeuralConnection::kSrcFieldNumber;
const int NeuralConnection::kDestFieldNumber;
const int NeuralConnection::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NeuralConnection::NeuralConnection()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.NeuralConnection)
}

void NeuralConnection::InitAsDefaultInstance() {
}

NeuralConnection::NeuralConnection(const NeuralConnection& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.NeuralConnection)
}

void NeuralConnection::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeuralConnection::~NeuralConnection() {
  // @@protoc_insertion_point(destructor:robogenMessage.NeuralConnection)
  SharedDtor();
}

void NeuralConnection::SharedDtor() {
  src_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void NeuralConnection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeuralConnection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeuralConnection_descriptor_;
}

const NeuralConnection& NeuralConnection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

NeuralConnection* NeuralConnection::default_instance_ = NULL;

NeuralConnection* NeuralConnection::New(::google::protobuf::Arena* arena) const {
  NeuralConnection* n = new NeuralConnection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NeuralConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.NeuralConnection)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_src()) {
      src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dest()) {
      dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NeuralConnection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.NeuralConnection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.NeuralConnection.src");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dest;
        break;
      }

      // required string dest = 2;
      case 2: {
        if (tag == 18) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.NeuralConnection.dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }

      // required float weight = 3;
      case 3: {
        if (tag == 29) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.NeuralConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.NeuralConnection)
  return false;
#undef DO_
}

void NeuralConnection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.NeuralConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // required float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.NeuralConnection)
}

::google::protobuf::uint8* NeuralConnection::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.NeuralConnection)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.NeuralConnection.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // required float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.NeuralConnection)
  return target;
}

int NeuralConnection::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.NeuralConnection)
  int total_size = 0;

  if (has_src()) {
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());
  }

  if (has_dest()) {
    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  if (has_weight()) {
    // required float weight = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int NeuralConnection::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.NeuralConnection)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string src = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src());

    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

    // required float weight = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeuralConnection::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.NeuralConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const NeuralConnection* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const NeuralConnection>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.NeuralConnection)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.NeuralConnection)
    MergeFrom(*source);
  }
}

void NeuralConnection::MergeFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.NeuralConnection)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_has_src();
      src_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_);
    }
    if (from.has_dest()) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void NeuralConnection::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeuralConnection::CopyFrom(const NeuralConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.NeuralConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeuralConnection::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NeuralConnection::Swap(NeuralConnection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NeuralConnection::InternalSwap(NeuralConnection* other) {
  src_.Swap(&other->src_);
  dest_.Swap(&other->dest_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NeuralConnection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeuralConnection_descriptor_;
  metadata.reflection = NeuralConnection_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NeuralConnection

// required string src = 1;
bool NeuralConnection::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NeuralConnection::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
void NeuralConnection::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
void NeuralConnection::clear_src() {
  src_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src();
}
 const ::std::string& NeuralConnection::src() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.src)
  return src_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NeuralConnection::set_src(const ::std::string& value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.src)
}
 void NeuralConnection::set_src(const char* value) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.NeuralConnection.src)
}
 void NeuralConnection::set_src(const char* value, size_t size) {
  set_has_src();
  src_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.NeuralConnection.src)
}
 ::std::string* NeuralConnection::mutable_src() {
  set_has_src();
  // @@protoc_insertion_point(field_mutable:robogenMessage.NeuralConnection.src)
  return src_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NeuralConnection::release_src() {
  // @@protoc_insertion_point(field_release:robogenMessage.NeuralConnection.src)
  clear_has_src();
  return src_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NeuralConnection::set_allocated_src(::std::string* src) {
  if (src != NULL) {
    set_has_src();
  } else {
    clear_has_src();
  }
  src_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.NeuralConnection.src)
}

// required string dest = 2;
bool NeuralConnection::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NeuralConnection::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void NeuralConnection::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void NeuralConnection::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
 const ::std::string& NeuralConnection::dest() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.dest)
  return dest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NeuralConnection::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.dest)
}
 void NeuralConnection::set_dest(const char* value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.NeuralConnection.dest)
}
 void NeuralConnection::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.NeuralConnection.dest)
}
 ::std::string* NeuralConnection::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:robogenMessage.NeuralConnection.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* NeuralConnection::release_dest() {
  // @@protoc_insertion_point(field_release:robogenMessage.NeuralConnection.dest)
  clear_has_dest();
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void NeuralConnection::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.NeuralConnection.dest)
}

// required float weight = 3;
bool NeuralConnection::has_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NeuralConnection::set_has_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void NeuralConnection::clear_has_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void NeuralConnection::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
 float NeuralConnection::weight() const {
  // @@protoc_insertion_point(field_get:robogenMessage.NeuralConnection.weight)
  return weight_;
}
 void NeuralConnection::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.NeuralConnection.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Neuron::kIdFieldNumber;
const int Neuron::kLayerFieldNumber;
const int Neuron::kTypeFieldNumber;
const int Neuron::kBiasFieldNumber;
const int Neuron::kBodyPartIdFieldNumber;
const int Neuron::kIoIdFieldNumber;
const int Neuron::kTauFieldNumber;
const int Neuron::kPhaseOffsetFieldNumber;
const int Neuron::kPeriodFieldNumber;
const int Neuron::kGainFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Neuron::Neuron()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Neuron)
}

void Neuron::InitAsDefaultInstance() {
}

Neuron::Neuron(const Neuron& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Neuron)
}

void Neuron::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bias_ = 0;
  bodypartid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ioid_ = 0;
  tau_ = 0;
  phaseoffset_ = 0;
  period_ = 0;
  gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Neuron::~Neuron() {
  // @@protoc_insertion_point(destructor:robogenMessage.Neuron)
  SharedDtor();
}

void Neuron::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bodypartid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Neuron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Neuron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Neuron_descriptor_;
}

const Neuron& Neuron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Neuron* Neuron::default_instance_ = NULL;

Neuron* Neuron::New(::google::protobuf::Arena* arena) const {
  Neuron* n = new Neuron;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Neuron::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Neuron)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Neuron, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Neuron*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(bias_, phaseoffset_);
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_layer()) {
      layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_bodypartid()) {
      bodypartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(period_, gain_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Neuron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Neuron)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_layer;
        break;
      }

      // required string layer = 2;
      case 2: {
        if (tag == 18) {
         parse_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.layer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // required string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_bias;
        break;
      }

      // optional float bias = 4;
      case 4: {
        if (tag == 37) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_bodyPartId;
        break;
      }

      // optional string bodyPartId = 5;
      case 5: {
        if (tag == 42) {
         parse_bodyPartId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bodypartid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bodypartid().data(), this->bodypartid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.Neuron.bodyPartId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ioId;
        break;
      }

      // optional int32 ioId = 6;
      case 6: {
        if (tag == 48) {
         parse_ioId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioid_)));
          set_has_ioid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_tau;
        break;
      }

      // optional float tau = 7;
      case 7: {
        if (tag == 61) {
         parse_tau:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tau_)));
          set_has_tau();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_phaseOffset;
        break;
      }

      // optional float phaseOffset = 8;
      case 8: {
        if (tag == 69) {
         parse_phaseOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phaseoffset_)));
          set_has_phaseoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_period;
        break;
      }

      // optional float period = 9;
      case 9: {
        if (tag == 77) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_gain;
        break;
      }

      // optional float gain = 10;
      case 10: {
        if (tag == 85) {
         parse_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gain_)));
          set_has_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Neuron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Neuron)
  return false;
#undef DO_
}

void Neuron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Neuron)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer(), output);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional float bias = 4;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bias(), output);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.bodyPartId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->bodypartid(), output);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ioid(), output);
  }

  // optional float tau = 7;
  if (has_tau()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->tau(), output);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->phaseoffset(), output);
  }

  // optional float period = 9;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->period(), output);
  }

  // optional float gain = 10;
  if (has_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gain(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Neuron)
}

::google::protobuf::uint8* Neuron::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Neuron)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer(), target);
  }

  // required string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional float bias = 4;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->bias(), target);
  }

  // optional string bodyPartId = 5;
  if (has_bodypartid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bodypartid().data(), this->bodypartid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.Neuron.bodyPartId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bodypartid(), target);
  }

  // optional int32 ioId = 6;
  if (has_ioid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ioid(), target);
  }

  // optional float tau = 7;
  if (has_tau()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->tau(), target);
  }

  // optional float phaseOffset = 8;
  if (has_phaseoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->phaseoffset(), target);
  }

  // optional float period = 9;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->period(), target);
  }

  // optional float gain = 10;
  if (has_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gain(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Neuron)
  return target;
}

int Neuron::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Neuron)
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_layer()) {
    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());
  }

  if (has_type()) {
    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  return total_size;
}
int Neuron::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Neuron)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required string layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());

    // required string type = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[3 / 32] & 248u) {
    // optional float bias = 4;
    if (has_bias()) {
      total_size += 1 + 4;
    }

    // optional string bodyPartId = 5;
    if (has_bodypartid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bodypartid());
    }

    // optional int32 ioId = 6;
    if (has_ioid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioid());
    }

    // optional float tau = 7;
    if (has_tau()) {
      total_size += 1 + 4;
    }

    // optional float phaseOffset = 8;
    if (has_phaseoffset()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float period = 9;
    if (has_period()) {
      total_size += 1 + 4;
    }

    // optional float gain = 10;
    if (has_gain()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Neuron::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Neuron)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Neuron* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Neuron>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Neuron)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Neuron)
    MergeFrom(*source);
  }
}

void Neuron::MergeFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Neuron)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_layer()) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_bodypartid()) {
      set_has_bodypartid();
      bodypartid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bodypartid_);
    }
    if (from.has_ioid()) {
      set_ioid(from.ioid());
    }
    if (from.has_tau()) {
      set_tau(from.tau());
    }
    if (from.has_phaseoffset()) {
      set_phaseoffset(from.phaseoffset());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_gain()) {
      set_gain(from.gain());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Neuron::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Neuron::CopyFrom(const Neuron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Neuron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Neuron::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Neuron::Swap(Neuron* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Neuron::InternalSwap(Neuron* other) {
  id_.Swap(&other->id_);
  layer_.Swap(&other->layer_);
  type_.Swap(&other->type_);
  std::swap(bias_, other->bias_);
  bodypartid_.Swap(&other->bodypartid_);
  std::swap(ioid_, other->ioid_);
  std::swap(tau_, other->tau_);
  std::swap(phaseoffset_, other->phaseoffset_);
  std::swap(period_, other->period_);
  std::swap(gain_, other->gain_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Neuron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Neuron_descriptor_;
  metadata.reflection = Neuron_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Neuron

// required string id = 1;
bool Neuron::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Neuron::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Neuron::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Neuron::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& Neuron::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.id)
}
 void Neuron::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.id)
}
 void Neuron::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.id)
}
 ::std::string* Neuron::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Neuron::release_id() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.id)
}

// required string layer = 2;
bool Neuron::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Neuron::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void Neuron::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void Neuron::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
 const ::std::string& Neuron::layer() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.layer)
  return layer_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.layer)
}
 void Neuron::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.layer)
}
 void Neuron::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.layer)
}
 ::std::string* Neuron::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Neuron::release_layer() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.layer)
}

// required string type = 3;
bool Neuron::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Neuron::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Neuron::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Neuron::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& Neuron::type() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.type)
}
 void Neuron::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.type)
}
 void Neuron::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.type)
}
 ::std::string* Neuron::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Neuron::release_type() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.type)
}

// optional float bias = 4;
bool Neuron::has_bias() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Neuron::set_has_bias() {
  _has_bits_[0] |= 0x00000008u;
}
void Neuron::clear_has_bias() {
  _has_bits_[0] &= ~0x00000008u;
}
void Neuron::clear_bias() {
  bias_ = 0;
  clear_has_bias();
}
 float Neuron::bias() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.bias)
  return bias_;
}
 void Neuron::set_bias(float value) {
  set_has_bias();
  bias_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.bias)
}

// optional string bodyPartId = 5;
bool Neuron::has_bodypartid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Neuron::set_has_bodypartid() {
  _has_bits_[0] |= 0x00000010u;
}
void Neuron::clear_has_bodypartid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Neuron::clear_bodypartid() {
  bodypartid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bodypartid();
}
 const ::std::string& Neuron::bodypartid() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.bodyPartId)
  return bodypartid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_bodypartid(const ::std::string& value) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.bodyPartId)
}
 void Neuron::set_bodypartid(const char* value) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.Neuron.bodyPartId)
}
 void Neuron::set_bodypartid(const char* value, size_t size) {
  set_has_bodypartid();
  bodypartid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.Neuron.bodyPartId)
}
 ::std::string* Neuron::mutable_bodypartid() {
  set_has_bodypartid();
  // @@protoc_insertion_point(field_mutable:robogenMessage.Neuron.bodyPartId)
  return bodypartid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Neuron::release_bodypartid() {
  // @@protoc_insertion_point(field_release:robogenMessage.Neuron.bodyPartId)
  clear_has_bodypartid();
  return bodypartid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Neuron::set_allocated_bodypartid(::std::string* bodypartid) {
  if (bodypartid != NULL) {
    set_has_bodypartid();
  } else {
    clear_has_bodypartid();
  }
  bodypartid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bodypartid);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Neuron.bodyPartId)
}

// optional int32 ioId = 6;
bool Neuron::has_ioid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Neuron::set_has_ioid() {
  _has_bits_[0] |= 0x00000020u;
}
void Neuron::clear_has_ioid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Neuron::clear_ioid() {
  ioid_ = 0;
  clear_has_ioid();
}
 ::google::protobuf::int32 Neuron::ioid() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.ioId)
  return ioid_;
}
 void Neuron::set_ioid(::google::protobuf::int32 value) {
  set_has_ioid();
  ioid_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.ioId)
}

// optional float tau = 7;
bool Neuron::has_tau() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Neuron::set_has_tau() {
  _has_bits_[0] |= 0x00000040u;
}
void Neuron::clear_has_tau() {
  _has_bits_[0] &= ~0x00000040u;
}
void Neuron::clear_tau() {
  tau_ = 0;
  clear_has_tau();
}
 float Neuron::tau() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.tau)
  return tau_;
}
 void Neuron::set_tau(float value) {
  set_has_tau();
  tau_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.tau)
}

// optional float phaseOffset = 8;
bool Neuron::has_phaseoffset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Neuron::set_has_phaseoffset() {
  _has_bits_[0] |= 0x00000080u;
}
void Neuron::clear_has_phaseoffset() {
  _has_bits_[0] &= ~0x00000080u;
}
void Neuron::clear_phaseoffset() {
  phaseoffset_ = 0;
  clear_has_phaseoffset();
}
 float Neuron::phaseoffset() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.phaseOffset)
  return phaseoffset_;
}
 void Neuron::set_phaseoffset(float value) {
  set_has_phaseoffset();
  phaseoffset_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.phaseOffset)
}

// optional float period = 9;
bool Neuron::has_period() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Neuron::set_has_period() {
  _has_bits_[0] |= 0x00000100u;
}
void Neuron::clear_has_period() {
  _has_bits_[0] &= ~0x00000100u;
}
void Neuron::clear_period() {
  period_ = 0;
  clear_has_period();
}
 float Neuron::period() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.period)
  return period_;
}
 void Neuron::set_period(float value) {
  set_has_period();
  period_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.period)
}

// optional float gain = 10;
bool Neuron::has_gain() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Neuron::set_has_gain() {
  _has_bits_[0] |= 0x00000200u;
}
void Neuron::clear_has_gain() {
  _has_bits_[0] &= ~0x00000200u;
}
void Neuron::clear_gain() {
  gain_ = 0;
  clear_has_gain();
}
 float Neuron::gain() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Neuron.gain)
  return gain_;
}
 void Neuron::set_gain(float value) {
  set_has_gain();
  gain_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Neuron.gain)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Brain::kNeuronFieldNumber;
const int Brain::kConnectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Brain::Brain()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Brain)
}

void Brain::InitAsDefaultInstance() {
}

Brain::Brain(const Brain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Brain)
}

void Brain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Brain::~Brain() {
  // @@protoc_insertion_point(destructor:robogenMessage.Brain)
  SharedDtor();
}

void Brain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Brain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Brain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Brain_descriptor_;
}

const Brain& Brain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Brain* Brain::default_instance_ = NULL;

Brain* Brain::New(::google::protobuf::Arena* arena) const {
  Brain* n = new Brain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Brain::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Brain)
  neuron_.Clear();
  connection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Brain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Brain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robogenMessage.Neuron neuron = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_neuron:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_neuron()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_neuron;
        if (input->ExpectTag(18)) goto parse_loop_connection;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .robogenMessage.NeuralConnection connection = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_connection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_connection()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_connection;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Brain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Brain)
  return false;
#undef DO_
}

void Brain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Brain)
  // repeated .robogenMessage.Neuron neuron = 1;
  for (unsigned int i = 0, n = this->neuron_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->neuron(i), output);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (unsigned int i = 0, n = this->connection_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->connection(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Brain)
}

::google::protobuf::uint8* Brain::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Brain)
  // repeated .robogenMessage.Neuron neuron = 1;
  for (unsigned int i = 0, n = this->neuron_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->neuron(i), false, target);
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  for (unsigned int i = 0, n = this->connection_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->connection(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Brain)
  return target;
}

int Brain::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Brain)
  int total_size = 0;

  // repeated .robogenMessage.Neuron neuron = 1;
  total_size += 1 * this->neuron_size();
  for (int i = 0; i < this->neuron_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->neuron(i));
  }

  // repeated .robogenMessage.NeuralConnection connection = 2;
  total_size += 1 * this->connection_size();
  for (int i = 0; i < this->connection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->connection(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Brain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Brain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Brain* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Brain>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Brain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Brain)
    MergeFrom(*source);
  }
}

void Brain::MergeFrom(const Brain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Brain)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  neuron_.MergeFrom(from.neuron_);
  connection_.MergeFrom(from.connection_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Brain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Brain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Brain::CopyFrom(const Brain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Brain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Brain::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->neuron())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->connection())) return false;
  return true;
}

void Brain::Swap(Brain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Brain::InternalSwap(Brain* other) {
  neuron_.UnsafeArenaSwap(&other->neuron_);
  connection_.UnsafeArenaSwap(&other->connection_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Brain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Brain_descriptor_;
  metadata.reflection = Brain_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Brain

// repeated .robogenMessage.Neuron neuron = 1;
int Brain::neuron_size() const {
  return neuron_.size();
}
void Brain::clear_neuron() {
  neuron_.Clear();
}
const ::robogenMessage::Neuron& Brain::neuron(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Brain.neuron)
  return neuron_.Get(index);
}
::robogenMessage::Neuron* Brain::mutable_neuron(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Brain.neuron)
  return neuron_.Mutable(index);
}
::robogenMessage::Neuron* Brain::add_neuron() {
  // @@protoc_insertion_point(field_add:robogenMessage.Brain.neuron)
  return neuron_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >*
Brain::mutable_neuron() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Brain.neuron)
  return &neuron_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Neuron >&
Brain::neuron() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Brain.neuron)
  return neuron_;
}

// repeated .robogenMessage.NeuralConnection connection = 2;
int Brain::connection_size() const {
  return connection_.size();
}
void Brain::clear_connection() {
  connection_.Clear();
}
const ::robogenMessage::NeuralConnection& Brain::connection(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.Brain.connection)
  return connection_.Get(index);
}
::robogenMessage::NeuralConnection* Brain::mutable_connection(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.Brain.connection)
  return connection_.Mutable(index);
}
::robogenMessage::NeuralConnection* Brain::add_connection() {
  // @@protoc_insertion_point(field_add:robogenMessage.Brain.connection)
  return connection_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >*
Brain::mutable_connection() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.Brain.connection)
  return &connection_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::NeuralConnection >&
Brain::connection() const {
  // @@protoc_insertion_point(field_list:robogenMessage.Brain.connection)
  return connection_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kIdFieldNumber;
const int Robot::kBodyFieldNumber;
const int Robot::kBrainFieldNumber;
const int Robot::kComplexityFieldNumber;
const int Robot::kComplexityCostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Robot)
}

void Robot::InitAsDefaultInstance() {
  body_ = const_cast< ::robogenMessage::Body*>(&::robogenMessage::Body::default_instance());
  brain_ = const_cast< ::robogenMessage::Brain*>(&::robogenMessage::Brain::default_instance());
}

Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Robot)
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  body_ = NULL;
  brain_ = NULL;
  complexity_ = 0;
  complexitycost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:robogenMessage.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
  if (this != default_instance_) {
    delete body_;
    delete brain_;
  }
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Robot_descriptor_;
}

const Robot& Robot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Robot* Robot::default_instance_ = NULL;

Robot* Robot::New(::google::protobuf::Arena* arena) const {
  Robot* n = new Robot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Robot)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Robot, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Robot*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(id_, complexity_);
    if (has_body()) {
      if (body_ != NULL) body_->::robogenMessage::Body::Clear();
    }
    if (has_brain()) {
      if (brain_ != NULL) brain_->::robogenMessage::Brain::Clear();
    }
    complexitycost_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required .robogenMessage.Body body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_brain;
        break;
      }

      // required .robogenMessage.Brain brain = 3;
      case 3: {
        if (tag == 26) {
         parse_brain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brain()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_complexity;
        break;
      }

      // required float complexity = 4;
      case 4: {
        if (tag == 37) {
         parse_complexity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &complexity_)));
          set_has_complexity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_complexityCost;
        break;
      }

      // required float complexityCost = 5;
      case 5: {
        if (tag == 45) {
         parse_complexityCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &complexitycost_)));
          set_has_complexitycost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Robot)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required .robogenMessage.Body body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->body_, output);
  }

  // required .robogenMessage.Brain brain = 3;
  if (has_brain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->brain_, output);
  }

  // required float complexity = 4;
  if (has_complexity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->complexity(), output);
  }

  // required float complexityCost = 5;
  if (has_complexitycost()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->complexitycost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Robot)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required .robogenMessage.Body body = 2;
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->body_, false, target);
  }

  // required .robogenMessage.Brain brain = 3;
  if (has_brain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->brain_, false, target);
  }

  // required float complexity = 4;
  if (has_complexity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->complexity(), target);
  }

  // required float complexityCost = 5;
  if (has_complexitycost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->complexitycost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Robot)
  return target;
}

int Robot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Robot)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_body()) {
    // required .robogenMessage.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);
  }

  if (has_brain()) {
    // required .robogenMessage.Brain brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brain_);
  }

  if (has_complexity()) {
    // required float complexity = 4;
    total_size += 1 + 4;
  }

  if (has_complexitycost()) {
    // required float complexityCost = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
int Robot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Robot)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required .robogenMessage.Body body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_);

    // required .robogenMessage.Brain brain = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->brain_);

    // required float complexity = 4;
    total_size += 1 + 4;

    // required float complexityCost = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Robot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Robot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_body()) {
      mutable_body()->::robogenMessage::Body::MergeFrom(from.body());
    }
    if (from.has_brain()) {
      mutable_brain()->::robogenMessage::Brain::MergeFrom(from.brain());
    }
    if (from.has_complexity()) {
      set_complexity(from.complexity());
    }
    if (from.has_complexitycost()) {
      set_complexitycost(from.complexitycost());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_body()) {
    if (!this->body_->IsInitialized()) return false;
  }
  if (has_brain()) {
    if (!this->brain_->IsInitialized()) return false;
  }
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  std::swap(id_, other->id_);
  std::swap(body_, other->body_);
  std::swap(brain_, other->brain_);
  std::swap(complexity_, other->complexity_);
  std::swap(complexitycost_, other->complexitycost_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Robot_descriptor_;
  metadata.reflection = Robot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot

// required int32 id = 1;
bool Robot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 Robot::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.id)
  return id_;
}
 void Robot::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Robot.id)
}

// required .robogenMessage.Body body = 2;
bool Robot::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot::clear_body() {
  if (body_ != NULL) body_->::robogenMessage::Body::Clear();
  clear_has_body();
}
const ::robogenMessage::Body& Robot::body() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.body)
  return body_ != NULL ? *body_ : *default_instance_->body_;
}
::robogenMessage::Body* Robot::mutable_body() {
  set_has_body();
  if (body_ == NULL) {
    body_ = new ::robogenMessage::Body;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.Robot.body)
  return body_;
}
::robogenMessage::Body* Robot::release_body() {
  // @@protoc_insertion_point(field_release:robogenMessage.Robot.body)
  clear_has_body();
  ::robogenMessage::Body* temp = body_;
  body_ = NULL;
  return temp;
}
void Robot::set_allocated_body(::robogenMessage::Body* body) {
  delete body_;
  body_ = body;
  if (body) {
    set_has_body();
  } else {
    clear_has_body();
  }
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Robot.body)
}

// required .robogenMessage.Brain brain = 3;
bool Robot::has_brain() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot::set_has_brain() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot::clear_has_brain() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot::clear_brain() {
  if (brain_ != NULL) brain_->::robogenMessage::Brain::Clear();
  clear_has_brain();
}
const ::robogenMessage::Brain& Robot::brain() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.brain)
  return brain_ != NULL ? *brain_ : *default_instance_->brain_;
}
::robogenMessage::Brain* Robot::mutable_brain() {
  set_has_brain();
  if (brain_ == NULL) {
    brain_ = new ::robogenMessage::Brain;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.Robot.brain)
  return brain_;
}
::robogenMessage::Brain* Robot::release_brain() {
  // @@protoc_insertion_point(field_release:robogenMessage.Robot.brain)
  clear_has_brain();
  ::robogenMessage::Brain* temp = brain_;
  brain_ = NULL;
  return temp;
}
void Robot::set_allocated_brain(::robogenMessage::Brain* brain) {
  delete brain_;
  brain_ = brain;
  if (brain) {
    set_has_brain();
  } else {
    clear_has_brain();
  }
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.Robot.brain)
}

// required float complexity = 4;
bool Robot::has_complexity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robot::set_has_complexity() {
  _has_bits_[0] |= 0x00000008u;
}
void Robot::clear_has_complexity() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robot::clear_complexity() {
  complexity_ = 0;
  clear_has_complexity();
}
 float Robot::complexity() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.complexity)
  return complexity_;
}
 void Robot::set_complexity(float value) {
  set_has_complexity();
  complexity_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Robot.complexity)
}

// required float complexityCost = 5;
bool Robot::has_complexitycost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Robot::set_has_complexitycost() {
  _has_bits_[0] |= 0x00000010u;
}
void Robot::clear_has_complexitycost() {
  _has_bits_[0] &= ~0x00000010u;
}
void Robot::clear_complexitycost() {
  complexitycost_ = 0;
  clear_has_complexitycost();
}
 float Robot::complexitycost() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Robot.complexityCost)
  return complexitycost_;
}
 void Robot::set_complexitycost(float value) {
  set_has_complexitycost();
  complexitycost_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Robot.complexityCost)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kXFieldNumber;
const int Obstacle::kYFieldNumber;
const int Obstacle::kZFieldNumber;
const int Obstacle::kXSizeFieldNumber;
const int Obstacle::kYSizeFieldNumber;
const int Obstacle::kZSizeFieldNumber;
const int Obstacle::kDensityFieldNumber;
const int Obstacle::kXRotationFieldNumber;
const int Obstacle::kYRotationFieldNumber;
const int Obstacle::kZRotationFieldNumber;
const int Obstacle::kRotationAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Obstacle)
}

void Obstacle::InitAsDefaultInstance() {
}

Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Obstacle)
}

void Obstacle::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  xsize_ = 0;
  ysize_ = 0;
  zsize_ = 0;
  density_ = 0;
  xrotation_ = 0;
  yrotation_ = 0;
  zrotation_ = 0;
  rotationangle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:robogenMessage.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Obstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Obstacle_descriptor_;
}

const Obstacle& Obstacle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Obstacle* Obstacle::default_instance_ = NULL;

Obstacle* Obstacle::New(::google::protobuf::Arena* arena) const {
  Obstacle* n = new Obstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Obstacle)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Obstacle, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Obstacle*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(x_, xrotation_);
  }
  ZR_(yrotation_, rotationangle_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Obstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_xSize;
        break;
      }

      // required float xSize = 4;
      case 4: {
        if (tag == 37) {
         parse_xSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xsize_)));
          set_has_xsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ySize;
        break;
      }

      // required float ySize = 5;
      case 5: {
        if (tag == 45) {
         parse_ySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ysize_)));
          set_has_ysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_zSize;
        break;
      }

      // required float zSize = 6;
      case 6: {
        if (tag == 53) {
         parse_zSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zsize_)));
          set_has_zsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_density;
        break;
      }

      // required float density = 7;
      case 7: {
        if (tag == 61) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_xRotation;
        break;
      }

      // required float xRotation = 8;
      case 8: {
        if (tag == 69) {
         parse_xRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xrotation_)));
          set_has_xrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_yRotation;
        break;
      }

      // required float yRotation = 9;
      case 9: {
        if (tag == 77) {
         parse_yRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yrotation_)));
          set_has_yrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_zRotation;
        break;
      }

      // required float zRotation = 10;
      case 10: {
        if (tag == 85) {
         parse_zRotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zrotation_)));
          set_has_zrotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_rotationAngle;
        break;
      }

      // required float rotationAngle = 11;
      case 11: {
        if (tag == 93) {
         parse_rotationAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationangle_)));
          set_has_rotationangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Obstacle)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->xsize(), output);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ysize(), output);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zsize(), output);
  }

  // required float density = 7;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->density(), output);
  }

  // required float xRotation = 8;
  if (has_xrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xrotation(), output);
  }

  // required float yRotation = 9;
  if (has_yrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->yrotation(), output);
  }

  // required float zRotation = 10;
  if (has_zrotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->zrotation(), output);
  }

  // required float rotationAngle = 11;
  if (has_rotationangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->rotationangle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Obstacle)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->xsize(), target);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ysize(), target);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zsize(), target);
  }

  // required float density = 7;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->density(), target);
  }

  // required float xRotation = 8;
  if (has_xrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xrotation(), target);
  }

  // required float yRotation = 9;
  if (has_yrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->yrotation(), target);
  }

  // required float zRotation = 10;
  if (has_zrotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->zrotation(), target);
  }

  // required float rotationAngle = 11;
  if (has_rotationangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->rotationangle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Obstacle)
  return target;
}

int Obstacle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Obstacle)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_xsize()) {
    // required float xSize = 4;
    total_size += 1 + 4;
  }

  if (has_ysize()) {
    // required float ySize = 5;
    total_size += 1 + 4;
  }

  if (has_zsize()) {
    // required float zSize = 6;
    total_size += 1 + 4;
  }

  if (has_density()) {
    // required float density = 7;
    total_size += 1 + 4;
  }

  if (has_xrotation()) {
    // required float xRotation = 8;
    total_size += 1 + 4;
  }

  if (has_yrotation()) {
    // required float yRotation = 9;
    total_size += 1 + 4;
  }

  if (has_zrotation()) {
    // required float zRotation = 10;
    total_size += 1 + 4;
  }

  if (has_rotationangle()) {
    // required float rotationAngle = 11;
    total_size += 1 + 4;
  }

  return total_size;
}
int Obstacle::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Obstacle)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float xSize = 4;
    total_size += 1 + 4;

    // required float ySize = 5;
    total_size += 1 + 4;

    // required float zSize = 6;
    total_size += 1 + 4;

    // required float density = 7;
    total_size += 1 + 4;

    // required float xRotation = 8;
    total_size += 1 + 4;

    // required float yRotation = 9;
    total_size += 1 + 4;

    // required float zRotation = 10;
    total_size += 1 + 4;

    // required float rotationAngle = 11;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Obstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Obstacle* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Obstacle)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_xsize()) {
      set_xsize(from.xsize());
    }
    if (from.has_ysize()) {
      set_ysize(from.ysize());
    }
    if (from.has_zsize()) {
      set_zsize(from.zsize());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_xrotation()) {
      set_xrotation(from.xrotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_yrotation()) {
      set_yrotation(from.yrotation());
    }
    if (from.has_zrotation()) {
      set_zrotation(from.zrotation());
    }
    if (from.has_rotationangle()) {
      set_rotationangle(from.rotationangle());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(xsize_, other->xsize_);
  std::swap(ysize_, other->ysize_);
  std::swap(zsize_, other->zsize_);
  std::swap(density_, other->density_);
  std::swap(xrotation_, other->xrotation_);
  std::swap(yrotation_, other->yrotation_);
  std::swap(zrotation_, other->zrotation_);
  std::swap(rotationangle_, other->rotationangle_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Obstacle_descriptor_;
  metadata.reflection = Obstacle_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacle

// required float x = 1;
bool Obstacle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Obstacle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Obstacle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacle::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Obstacle::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.x)
  return x_;
}
 void Obstacle::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.x)
}

// required float y = 2;
bool Obstacle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Obstacle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Obstacle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Obstacle::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Obstacle::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.y)
  return y_;
}
 void Obstacle::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.y)
}

// required float z = 3;
bool Obstacle::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Obstacle::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Obstacle::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Obstacle::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Obstacle::z() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.z)
  return z_;
}
 void Obstacle::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.z)
}

// required float xSize = 4;
bool Obstacle::has_xsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Obstacle::set_has_xsize() {
  _has_bits_[0] |= 0x00000008u;
}
void Obstacle::clear_has_xsize() {
  _has_bits_[0] &= ~0x00000008u;
}
void Obstacle::clear_xsize() {
  xsize_ = 0;
  clear_has_xsize();
}
 float Obstacle::xsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.xSize)
  return xsize_;
}
 void Obstacle::set_xsize(float value) {
  set_has_xsize();
  xsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.xSize)
}

// required float ySize = 5;
bool Obstacle::has_ysize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Obstacle::set_has_ysize() {
  _has_bits_[0] |= 0x00000010u;
}
void Obstacle::clear_has_ysize() {
  _has_bits_[0] &= ~0x00000010u;
}
void Obstacle::clear_ysize() {
  ysize_ = 0;
  clear_has_ysize();
}
 float Obstacle::ysize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.ySize)
  return ysize_;
}
 void Obstacle::set_ysize(float value) {
  set_has_ysize();
  ysize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.ySize)
}

// required float zSize = 6;
bool Obstacle::has_zsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Obstacle::set_has_zsize() {
  _has_bits_[0] |= 0x00000020u;
}
void Obstacle::clear_has_zsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void Obstacle::clear_zsize() {
  zsize_ = 0;
  clear_has_zsize();
}
 float Obstacle::zsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.zSize)
  return zsize_;
}
 void Obstacle::set_zsize(float value) {
  set_has_zsize();
  zsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.zSize)
}

// required float density = 7;
bool Obstacle::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Obstacle::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
void Obstacle::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
void Obstacle::clear_density() {
  density_ = 0;
  clear_has_density();
}
 float Obstacle::density() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.density)
  return density_;
}
 void Obstacle::set_density(float value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.density)
}

// required float xRotation = 8;
bool Obstacle::has_xrotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Obstacle::set_has_xrotation() {
  _has_bits_[0] |= 0x00000080u;
}
void Obstacle::clear_has_xrotation() {
  _has_bits_[0] &= ~0x00000080u;
}
void Obstacle::clear_xrotation() {
  xrotation_ = 0;
  clear_has_xrotation();
}
 float Obstacle::xrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.xRotation)
  return xrotation_;
}
 void Obstacle::set_xrotation(float value) {
  set_has_xrotation();
  xrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.xRotation)
}

// required float yRotation = 9;
bool Obstacle::has_yrotation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Obstacle::set_has_yrotation() {
  _has_bits_[0] |= 0x00000100u;
}
void Obstacle::clear_has_yrotation() {
  _has_bits_[0] &= ~0x00000100u;
}
void Obstacle::clear_yrotation() {
  yrotation_ = 0;
  clear_has_yrotation();
}
 float Obstacle::yrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.yRotation)
  return yrotation_;
}
 void Obstacle::set_yrotation(float value) {
  set_has_yrotation();
  yrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.yRotation)
}

// required float zRotation = 10;
bool Obstacle::has_zrotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Obstacle::set_has_zrotation() {
  _has_bits_[0] |= 0x00000200u;
}
void Obstacle::clear_has_zrotation() {
  _has_bits_[0] &= ~0x00000200u;
}
void Obstacle::clear_zrotation() {
  zrotation_ = 0;
  clear_has_zrotation();
}
 float Obstacle::zrotation() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.zRotation)
  return zrotation_;
}
 void Obstacle::set_zrotation(float value) {
  set_has_zrotation();
  zrotation_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.zRotation)
}

// required float rotationAngle = 11;
bool Obstacle::has_rotationangle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Obstacle::set_has_rotationangle() {
  _has_bits_[0] |= 0x00000400u;
}
void Obstacle::clear_has_rotationangle() {
  _has_bits_[0] &= ~0x00000400u;
}
void Obstacle::clear_rotationangle() {
  rotationangle_ = 0;
  clear_has_rotationangle();
}
 float Obstacle::rotationangle() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Obstacle.rotationAngle)
  return rotationangle_;
}
 void Obstacle::set_rotationangle(float value) {
  set_has_rotationangle();
  rotationangle_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Obstacle.rotationAngle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightSource::kXFieldNumber;
const int LightSource::kYFieldNumber;
const int LightSource::kZFieldNumber;
const int LightSource::kIntensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightSource::LightSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.LightSource)
}

void LightSource::InitAsDefaultInstance() {
}

LightSource::LightSource(const LightSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.LightSource)
}

void LightSource::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  intensity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LightSource::~LightSource() {
  // @@protoc_insertion_point(destructor:robogenMessage.LightSource)
  SharedDtor();
}

void LightSource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LightSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightSource_descriptor_;
}

const LightSource& LightSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

LightSource* LightSource::default_instance_ = NULL;

LightSource* LightSource::New(::google::protobuf::Arena* arena) const {
  LightSource* n = new LightSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightSource::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.LightSource)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LightSource, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LightSource*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, intensity_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LightSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.LightSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_intensity;
        break;
      }

      // required float intensity = 7;
      case 7: {
        if (tag == 61) {
         parse_intensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intensity_)));
          set_has_intensity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.LightSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.LightSource)
  return false;
#undef DO_
}

void LightSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.LightSource)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float intensity = 7;
  if (has_intensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intensity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.LightSource)
}

::google::protobuf::uint8* LightSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.LightSource)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float intensity = 7;
  if (has_intensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->intensity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.LightSource)
  return target;
}

int LightSource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.LightSource)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_intensity()) {
    // required float intensity = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
int LightSource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.LightSource)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float intensity = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.LightSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LightSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LightSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.LightSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.LightSource)
    MergeFrom(*source);
  }
}

void LightSource::MergeFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.LightSource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_intensity()) {
      set_intensity(from.intensity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LightSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightSource::CopyFrom(const LightSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.LightSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightSource::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void LightSource::Swap(LightSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightSource::InternalSwap(LightSource* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(intensity_, other->intensity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightSource_descriptor_;
  metadata.reflection = LightSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LightSource

// required float x = 1;
bool LightSource::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LightSource::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void LightSource::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void LightSource::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float LightSource::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.x)
  return x_;
}
 void LightSource::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.x)
}

// required float y = 2;
bool LightSource::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LightSource::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void LightSource::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void LightSource::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float LightSource::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.y)
  return y_;
}
 void LightSource::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.y)
}

// required float z = 3;
bool LightSource::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LightSource::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void LightSource::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void LightSource::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float LightSource::z() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.z)
  return z_;
}
 void LightSource::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.z)
}

// required float intensity = 7;
bool LightSource::has_intensity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LightSource::set_has_intensity() {
  _has_bits_[0] |= 0x00000008u;
}
void LightSource::clear_has_intensity() {
  _has_bits_[0] &= ~0x00000008u;
}
void LightSource::clear_intensity() {
  intensity_ = 0;
  clear_has_intensity();
}
 float LightSource::intensity() const {
  // @@protoc_insertion_point(field_get:robogenMessage.LightSource.intensity)
  return intensity_;
}
 void LightSource::set_intensity(float value) {
  set_has_intensity();
  intensity_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.LightSource.intensity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartPosition::kXFieldNumber;
const int StartPosition::kYFieldNumber;
const int StartPosition::kAzimuthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartPosition::StartPosition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.StartPosition)
}

void StartPosition::InitAsDefaultInstance() {
}

StartPosition::StartPosition(const StartPosition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.StartPosition)
}

void StartPosition::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  azimuth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartPosition::~StartPosition() {
  // @@protoc_insertion_point(destructor:robogenMessage.StartPosition)
  SharedDtor();
}

void StartPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartPosition_descriptor_;
}

const StartPosition& StartPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

StartPosition* StartPosition::default_instance_ = NULL;

StartPosition* StartPosition::New(::google::protobuf::Arena* arena) const {
  StartPosition* n = new StartPosition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.StartPosition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(StartPosition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StartPosition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, azimuth_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StartPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.StartPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_azimuth;
        break;
      }

      // required float azimuth = 3;
      case 3: {
        if (tag == 29) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.StartPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.StartPosition)
  return false;
#undef DO_
}

void StartPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.StartPosition)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float azimuth = 3;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->azimuth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.StartPosition)
}

::google::protobuf::uint8* StartPosition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.StartPosition)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float azimuth = 3;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->azimuth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.StartPosition)
  return target;
}

int StartPosition::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.StartPosition)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_azimuth()) {
    // required float azimuth = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int StartPosition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.StartPosition)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float azimuth = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.StartPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartPosition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartPosition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.StartPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.StartPosition)
    MergeFrom(*source);
  }
}

void StartPosition::MergeFrom(const StartPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.StartPosition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StartPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.StartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartPosition::CopyFrom(const StartPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.StartPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StartPosition::Swap(StartPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartPosition::InternalSwap(StartPosition* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(azimuth_, other->azimuth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartPosition_descriptor_;
  metadata.reflection = StartPosition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartPosition

// required float x = 1;
bool StartPosition::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartPosition::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void StartPosition::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartPosition::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float StartPosition::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.x)
  return x_;
}
 void StartPosition::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.x)
}

// required float y = 2;
bool StartPosition::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StartPosition::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void StartPosition::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void StartPosition::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float StartPosition::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.y)
  return y_;
}
 void StartPosition::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.y)
}

// required float azimuth = 3;
bool StartPosition::has_azimuth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void StartPosition::set_has_azimuth() {
  _has_bits_[0] |= 0x00000004u;
}
void StartPosition::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000004u;
}
void StartPosition::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
 float StartPosition::azimuth() const {
  // @@protoc_insertion_point(field_get:robogenMessage.StartPosition.azimuth)
  return azimuth_;
}
 void StartPosition::set_azimuth(float value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.StartPosition.azimuth)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Resource::kXFieldNumber;
const int Resource::kYFieldNumber;
const int Resource::kZFieldNumber;
const int Resource::kXSizeFieldNumber;
const int Resource::kYSizeFieldNumber;
const int Resource::kZSizeFieldNumber;
const int Resource::kDensityFieldNumber;
const int Resource::kPushingRobotsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Resource::Resource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.Resource)
}

void Resource::InitAsDefaultInstance() {
}

Resource::Resource(const Resource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.Resource)
}

void Resource::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  xsize_ = 0;
  ysize_ = 0;
  zsize_ = 0;
  density_ = 0;
  pushingrobots_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Resource::~Resource() {
  // @@protoc_insertion_point(destructor:robogenMessage.Resource)
  SharedDtor();
}

void Resource::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Resource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Resource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}

const Resource& Resource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

Resource* Resource::default_instance_ = NULL;

Resource* Resource::New(::google::protobuf::Arena* arena) const {
  Resource* n = new Resource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Resource::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.Resource)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Resource, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Resource*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(x_, pushingrobots_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Resource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.Resource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // required float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_xSize;
        break;
      }

      // required float xSize = 4;
      case 4: {
        if (tag == 37) {
         parse_xSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xsize_)));
          set_has_xsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_ySize;
        break;
      }

      // required float ySize = 5;
      case 5: {
        if (tag == 45) {
         parse_ySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ysize_)));
          set_has_ysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_zSize;
        break;
      }

      // required float zSize = 6;
      case 6: {
        if (tag == 53) {
         parse_zSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zsize_)));
          set_has_zsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_density;
        break;
      }

      // required float density = 7;
      case 7: {
        if (tag == 61) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_pushingRobots;
        break;
      }

      // required float pushingRobots = 8;
      case 8: {
        if (tag == 69) {
         parse_pushingRobots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pushingrobots_)));
          set_has_pushingrobots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.Resource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.Resource)
  return false;
#undef DO_
}

void Resource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.Resource)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->xsize(), output);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ysize(), output);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zsize(), output);
  }

  // required float density = 7;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->density(), output);
  }

  // required float pushingRobots = 8;
  if (has_pushingrobots()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pushingrobots(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.Resource)
}

::google::protobuf::uint8* Resource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.Resource)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // required float xSize = 4;
  if (has_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->xsize(), target);
  }

  // required float ySize = 5;
  if (has_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->ysize(), target);
  }

  // required float zSize = 6;
  if (has_zsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zsize(), target);
  }

  // required float density = 7;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->density(), target);
  }

  // required float pushingRobots = 8;
  if (has_pushingrobots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pushingrobots(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.Resource)
  return target;
}

int Resource::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.Resource)
  int total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float z = 3;
    total_size += 1 + 4;
  }

  if (has_xsize()) {
    // required float xSize = 4;
    total_size += 1 + 4;
  }

  if (has_ysize()) {
    // required float ySize = 5;
    total_size += 1 + 4;
  }

  if (has_zsize()) {
    // required float zSize = 6;
    total_size += 1 + 4;
  }

  if (has_density()) {
    // required float density = 7;
    total_size += 1 + 4;
  }

  if (has_pushingrobots()) {
    // required float pushingRobots = 8;
    total_size += 1 + 4;
  }

  return total_size;
}
int Resource::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.Resource)
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float z = 3;
    total_size += 1 + 4;

    // required float xSize = 4;
    total_size += 1 + 4;

    // required float ySize = 5;
    total_size += 1 + 4;

    // required float zSize = 6;
    total_size += 1 + 4;

    // required float density = 7;
    total_size += 1 + 4;

    // required float pushingRobots = 8;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Resource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.Resource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Resource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Resource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.Resource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.Resource)
    MergeFrom(*source);
  }
}

void Resource::MergeFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.Resource)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_xsize()) {
      set_xsize(from.xsize());
    }
    if (from.has_ysize()) {
      set_ysize(from.ysize());
    }
    if (from.has_zsize()) {
      set_zsize(from.zsize());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_pushingrobots()) {
      set_pushingrobots(from.pushingrobots());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Resource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resource::CopyFrom(const Resource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.Resource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resource::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Resource::Swap(Resource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Resource::InternalSwap(Resource* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(xsize_, other->xsize_);
  std::swap(ysize_, other->ysize_);
  std::swap(zsize_, other->zsize_);
  std::swap(density_, other->density_);
  std::swap(pushingrobots_, other->pushingrobots_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Resource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Resource_descriptor_;
  metadata.reflection = Resource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Resource

// required float x = 1;
bool Resource::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Resource::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Resource::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Resource::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Resource::x() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.x)
  return x_;
}
 void Resource::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.x)
}

// required float y = 2;
bool Resource::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Resource::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Resource::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Resource::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Resource::y() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.y)
  return y_;
}
 void Resource::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.y)
}

// required float z = 3;
bool Resource::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Resource::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Resource::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Resource::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Resource::z() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.z)
  return z_;
}
 void Resource::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.z)
}

// required float xSize = 4;
bool Resource::has_xsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Resource::set_has_xsize() {
  _has_bits_[0] |= 0x00000008u;
}
void Resource::clear_has_xsize() {
  _has_bits_[0] &= ~0x00000008u;
}
void Resource::clear_xsize() {
  xsize_ = 0;
  clear_has_xsize();
}
 float Resource::xsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.xSize)
  return xsize_;
}
 void Resource::set_xsize(float value) {
  set_has_xsize();
  xsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.xSize)
}

// required float ySize = 5;
bool Resource::has_ysize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Resource::set_has_ysize() {
  _has_bits_[0] |= 0x00000010u;
}
void Resource::clear_has_ysize() {
  _has_bits_[0] &= ~0x00000010u;
}
void Resource::clear_ysize() {
  ysize_ = 0;
  clear_has_ysize();
}
 float Resource::ysize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.ySize)
  return ysize_;
}
 void Resource::set_ysize(float value) {
  set_has_ysize();
  ysize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.ySize)
}

// required float zSize = 6;
bool Resource::has_zsize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Resource::set_has_zsize() {
  _has_bits_[0] |= 0x00000020u;
}
void Resource::clear_has_zsize() {
  _has_bits_[0] &= ~0x00000020u;
}
void Resource::clear_zsize() {
  zsize_ = 0;
  clear_has_zsize();
}
 float Resource::zsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.zSize)
  return zsize_;
}
 void Resource::set_zsize(float value) {
  set_has_zsize();
  zsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.zSize)
}

// required float density = 7;
bool Resource::has_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Resource::set_has_density() {
  _has_bits_[0] |= 0x00000040u;
}
void Resource::clear_has_density() {
  _has_bits_[0] &= ~0x00000040u;
}
void Resource::clear_density() {
  density_ = 0;
  clear_has_density();
}
 float Resource::density() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.density)
  return density_;
}
 void Resource::set_density(float value) {
  set_has_density();
  density_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.density)
}

// required float pushingRobots = 8;
bool Resource::has_pushingrobots() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Resource::set_has_pushingrobots() {
  _has_bits_[0] |= 0x00000080u;
}
void Resource::clear_has_pushingrobots() {
  _has_bits_[0] &= ~0x00000080u;
}
void Resource::clear_pushingrobots() {
  pushingrobots_ = 0;
  clear_has_pushingrobots();
}
 float Resource::pushingrobots() const {
  // @@protoc_insertion_point(field_get:robogenMessage.Resource.pushingRobots)
  return pushingrobots_;
}
 void Resource::set_pushingrobots(float value) {
  set_has_pushingrobots();
  pushingrobots_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.Resource.pushingRobots)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorConf::kTerrainWidthFieldNumber;
const int SimulatorConf::kTerrainLengthFieldNumber;
const int SimulatorConf::kObstaclesFieldNumber;
const int SimulatorConf::kScenarioFieldNumber;
const int SimulatorConf::kLightSourcesFieldNumber;
const int SimulatorConf::kTimeStepFieldNumber;
const int SimulatorConf::kNTimeStepsFieldNumber;
const int SimulatorConf::kStartPositionsFieldNumber;
const int SimulatorConf::kActuationPeriodFieldNumber;
const int SimulatorConf::kTerrainFrictionFieldNumber;
const int SimulatorConf::kSensorNoiseLevelFieldNumber;
const int SimulatorConf::kMotorNoiseLevelFieldNumber;
const int SimulatorConf::kCapAccelerationFieldNumber;
const int SimulatorConf::kMaxLinearAccelerationFieldNumber;
const int SimulatorConf::kMaxAngularAccelerationFieldNumber;
const int SimulatorConf::kMaxDirectionShiftsPerSecondFieldNumber;
const int SimulatorConf::kGravityXFieldNumber;
const int SimulatorConf::kGravityYFieldNumber;
const int SimulatorConf::kGravityZFieldNumber;
const int SimulatorConf::kTerrainTypeFieldNumber;
const int SimulatorConf::kTerrainHeightFieldNumber;
const int SimulatorConf::kTerrainHeightFieldFileNameFieldNumber;
const int SimulatorConf::kDisallowObstacleCollisionsFieldNumber;
const int SimulatorConf::kObstacleOverlapPolicyFieldNumber;
const int SimulatorConf::kGatheringZoneXFieldNumber;
const int SimulatorConf::kGatheringZoneYFieldNumber;
const int SimulatorConf::kGatheringZoneZFieldNumber;
const int SimulatorConf::kGatheringZoneSizeXFieldNumber;
const int SimulatorConf::kGatheringZoneSizeYFieldNumber;
const int SimulatorConf::kGatheringZoneSizeZFieldNumber;
const int SimulatorConf::kResourcesFieldNumber;
const int SimulatorConf::kSwarmSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorConf::SimulatorConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.SimulatorConf)
}

void SimulatorConf::InitAsDefaultInstance() {
}

SimulatorConf::SimulatorConf(const SimulatorConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.SimulatorConf)
}

void SimulatorConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  terrainwidth_ = 0;
  terrainlength_ = 0;
  scenario_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestep_ = 0;
  ntimesteps_ = 0;
  actuationperiod_ = 0;
  terrainfriction_ = 0;
  sensornoiselevel_ = 0;
  motornoiselevel_ = 0;
  capacceleration_ = false;
  maxlinearacceleration_ = 0;
  maxangularacceleration_ = 0;
  maxdirectionshiftspersecond_ = 0;
  gravityx_ = 0;
  gravityy_ = 0;
  gravityz_ = 0;
  terraintype_ = 0;
  terrainheight_ = 0;
  terrainheightfieldfilename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  disallowobstaclecollisions_ = false;
  obstacleoverlappolicy_ = 0u;
  gatheringzonex_ = 0;
  gatheringzoney_ = 0;
  gatheringzonez_ = 0;
  gatheringzonesizex_ = 0;
  gatheringzonesizey_ = 0;
  gatheringzonesizez_ = 0;
  swarmsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimulatorConf::~SimulatorConf() {
  // @@protoc_insertion_point(destructor:robogenMessage.SimulatorConf)
  SharedDtor();
}

void SimulatorConf::SharedDtor() {
  scenario_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  terrainheightfieldfilename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SimulatorConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimulatorConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimulatorConf_descriptor_;
}

const SimulatorConf& SimulatorConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

SimulatorConf* SimulatorConf::default_instance_ = NULL;

SimulatorConf* SimulatorConf::New(::google::protobuf::Arena* arena) const {
  SimulatorConf* n = new SimulatorConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimulatorConf::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.SimulatorConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SimulatorConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SimulatorConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 107u) {
    ZR_(terrainwidth_, terrainlength_);
    ZR_(timestep_, ntimesteps_);
    if (has_scenario()) {
      scenario_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(actuationperiod_, maxdirectionshiftspersecond_);
    capacceleration_ = false;
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(gravityx_, gravityy_);
    ZR_(disallowobstaclecollisions_, terraintype_);
    ZR_(terrainheight_, obstacleoverlappolicy_);
    if (has_terrainheightfieldfilename()) {
      terrainheightfieldfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[24 / 32] & 3204448256u) {
    ZR_(gatheringzonex_, gatheringzonesizez_);
    swarmsize_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  obstacles_.Clear();
  lightsources_.Clear();
  startpositions_.Clear();
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SimulatorConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.SimulatorConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float terrainWidth = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainwidth_)));
          set_has_terrainwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_terrainLength;
        break;
      }

      // required float terrainLength = 2;
      case 2: {
        if (tag == 21) {
         parse_terrainLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainlength_)));
          set_has_terrainlength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_obstacles;
        break;
      }

      // repeated .robogenMessage.Obstacle obstacles = 3;
      case 3: {
        if (tag == 26) {
         parse_obstacles:
          DO_(input->IncrementRecursionDepth());
         parse_loop_obstacles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_obstacles;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_scenario;
        break;
      }

      // required string scenario = 4;
      case 4: {
        if (tag == 34) {
         parse_scenario:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenario()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenario().data(), this->scenario().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.SimulatorConf.scenario");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lightSources;
        break;
      }

      // repeated .robogenMessage.LightSource lightSources = 5;
      case 5: {
        if (tag == 42) {
         parse_lightSources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_lightSources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lightsources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_lightSources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(53)) goto parse_timeStep;
        break;
      }

      // required float timeStep = 6;
      case 6: {
        if (tag == 53) {
         parse_timeStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timestep_)));
          set_has_timestep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_nTimeSteps;
        break;
      }

      // required int32 nTimeSteps = 7;
      case 7: {
        if (tag == 56) {
         parse_nTimeSteps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntimesteps_)));
          set_has_ntimesteps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_startPositions;
        break;
      }

      // repeated .robogenMessage.StartPosition startPositions = 8;
      case 8: {
        if (tag == 66) {
         parse_startPositions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_startPositions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_startpositions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_startPositions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(72)) goto parse_actuationPeriod;
        break;
      }

      // required int32 actuationPeriod = 9;
      case 9: {
        if (tag == 72) {
         parse_actuationPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actuationperiod_)));
          set_has_actuationperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_terrainFriction;
        break;
      }

      // required float terrainFriction = 10;
      case 10: {
        if (tag == 85) {
         parse_terrainFriction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainfriction_)));
          set_has_terrainfriction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_sensorNoiseLevel;
        break;
      }

      // required float sensorNoiseLevel = 11;
      case 11: {
        if (tag == 93) {
         parse_sensorNoiseLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensornoiselevel_)));
          set_has_sensornoiselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_motorNoiseLevel;
        break;
      }

      // required float motorNoiseLevel = 12;
      case 12: {
        if (tag == 101) {
         parse_motorNoiseLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motornoiselevel_)));
          set_has_motornoiselevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_capAcceleration;
        break;
      }

      // required bool capAcceleration = 13;
      case 13: {
        if (tag == 104) {
         parse_capAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &capacceleration_)));
          set_has_capacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_maxLinearAcceleration;
        break;
      }

      // required float maxLinearAcceleration = 14;
      case 14: {
        if (tag == 117) {
         parse_maxLinearAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxlinearacceleration_)));
          set_has_maxlinearacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_maxAngularAcceleration;
        break;
      }

      // required float maxAngularAcceleration = 15;
      case 15: {
        if (tag == 125) {
         parse_maxAngularAcceleration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxangularacceleration_)));
          set_has_maxangularacceleration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_maxDirectionShiftsPerSecond;
        break;
      }

      // required int32 maxDirectionShiftsPerSecond = 16;
      case 16: {
        if (tag == 128) {
         parse_maxDirectionShiftsPerSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxdirectionshiftspersecond_)));
          set_has_maxdirectionshiftspersecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_gravityX;
        break;
      }

      // required float gravityX = 17;
      case 17: {
        if (tag == 141) {
         parse_gravityX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityx_)));
          set_has_gravityx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_gravityY;
        break;
      }

      // required float gravityY = 18;
      case 18: {
        if (tag == 149) {
         parse_gravityY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityy_)));
          set_has_gravityy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(157)) goto parse_gravityZ;
        break;
      }

      // required float gravityZ = 19;
      case 19: {
        if (tag == 157) {
         parse_gravityZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravityz_)));
          set_has_gravityz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_terrainType;
        break;
      }

      // required int32 terrainType = 20;
      case 20: {
        if (tag == 160) {
         parse_terrainType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &terraintype_)));
          set_has_terraintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(173)) goto parse_terrainHeight;
        break;
      }

      // required float terrainHeight = 21;
      case 21: {
        if (tag == 173) {
         parse_terrainHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &terrainheight_)));
          set_has_terrainheight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_terrainHeightFieldFileName;
        break;
      }

      // required string terrainHeightFieldFileName = 22;
      case 22: {
        if (tag == 178) {
         parse_terrainHeightFieldFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_terrainheightfieldfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->terrainheightfieldfilename().data(), this->terrainheightfieldfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_disallowObstacleCollisions;
        break;
      }

      // required bool disallowObstacleCollisions = 23;
      case 23: {
        if (tag == 184) {
         parse_disallowObstacleCollisions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disallowobstaclecollisions_)));
          set_has_disallowobstaclecollisions();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_obstacleOverlapPolicy;
        break;
      }

      // required uint32 obstacleOverlapPolicy = 24;
      case 24: {
        if (tag == 192) {
         parse_obstacleOverlapPolicy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obstacleoverlappolicy_)));
          set_has_obstacleoverlappolicy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_gatheringZoneX;
        break;
      }

      // required float gatheringZoneX = 25;
      case 25: {
        if (tag == 205) {
         parse_gatheringZoneX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzonex_)));
          set_has_gatheringzonex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(213)) goto parse_gatheringZoneY;
        break;
      }

      // required float gatheringZoneY = 26;
      case 26: {
        if (tag == 213) {
         parse_gatheringZoneY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzoney_)));
          set_has_gatheringzoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(221)) goto parse_gatheringZoneZ;
        break;
      }

      // required float gatheringZoneZ = 27;
      case 27: {
        if (tag == 221) {
         parse_gatheringZoneZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzonez_)));
          set_has_gatheringzonez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(229)) goto parse_gatheringZoneSizeX;
        break;
      }

      // required float gatheringZoneSizeX = 28;
      case 28: {
        if (tag == 229) {
         parse_gatheringZoneSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzonesizex_)));
          set_has_gatheringzonesizex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(237)) goto parse_gatheringZoneSizeY;
        break;
      }

      // required float gatheringZoneSizeY = 29;
      case 29: {
        if (tag == 237) {
         parse_gatheringZoneSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzonesizey_)));
          set_has_gatheringzonesizey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_gatheringZoneSizeZ;
        break;
      }

      // required float gatheringZoneSizeZ = 30;
      case 30: {
        if (tag == 245) {
         parse_gatheringZoneSizeZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gatheringzonesizez_)));
          set_has_gatheringzonesizez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_resources;
        break;
      }

      // repeated .robogenMessage.Resource resources = 31;
      case 31: {
        if (tag == 250) {
         parse_resources:
          DO_(input->IncrementRecursionDepth());
         parse_loop_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_loop_resources;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(256)) goto parse_swarmSize;
        break;
      }

      // required int32 swarmSize = 32;
      case 32: {
        if (tag == 256) {
         parse_swarmSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &swarmsize_)));
          set_has_swarmsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.SimulatorConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.SimulatorConf)
  return false;
#undef DO_
}

void SimulatorConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.SimulatorConf)
  // required float terrainWidth = 1;
  if (has_terrainwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->terrainwidth(), output);
  }

  // required float terrainLength = 2;
  if (has_terrainlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->terrainlength(), output);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacles(i), output);
  }

  // required string scenario = 4;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), this->scenario().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.scenario");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->scenario(), output);
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  for (unsigned int i = 0, n = this->lightsources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lightsources(i), output);
  }

  // required float timeStep = 6;
  if (has_timestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->timestep(), output);
  }

  // required int32 nTimeSteps = 7;
  if (has_ntimesteps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ntimesteps(), output);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (unsigned int i = 0, n = this->startpositions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->startpositions(i), output);
  }

  // required int32 actuationPeriod = 9;
  if (has_actuationperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->actuationperiod(), output);
  }

  // required float terrainFriction = 10;
  if (has_terrainfriction()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->terrainfriction(), output);
  }

  // required float sensorNoiseLevel = 11;
  if (has_sensornoiselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sensornoiselevel(), output);
  }

  // required float motorNoiseLevel = 12;
  if (has_motornoiselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->motornoiselevel(), output);
  }

  // required bool capAcceleration = 13;
  if (has_capacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->capacceleration(), output);
  }

  // required float maxLinearAcceleration = 14;
  if (has_maxlinearacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maxlinearacceleration(), output);
  }

  // required float maxAngularAcceleration = 15;
  if (has_maxangularacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maxangularacceleration(), output);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (has_maxdirectionshiftspersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->maxdirectionshiftspersecond(), output);
  }

  // required float gravityX = 17;
  if (has_gravityx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->gravityx(), output);
  }

  // required float gravityY = 18;
  if (has_gravityy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->gravityy(), output);
  }

  // required float gravityZ = 19;
  if (has_gravityz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->gravityz(), output);
  }

  // required int32 terrainType = 20;
  if (has_terraintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->terraintype(), output);
  }

  // required float terrainHeight = 21;
  if (has_terrainheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->terrainheight(), output);
  }

  // required string terrainHeightFieldFileName = 22;
  if (has_terrainheightfieldfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terrainheightfieldfilename().data(), this->terrainheightfieldfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->terrainheightfieldfilename(), output);
  }

  // required bool disallowObstacleCollisions = 23;
  if (has_disallowobstaclecollisions()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->disallowobstaclecollisions(), output);
  }

  // required uint32 obstacleOverlapPolicy = 24;
  if (has_obstacleoverlappolicy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->obstacleoverlappolicy(), output);
  }

  // required float gatheringZoneX = 25;
  if (has_gatheringzonex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->gatheringzonex(), output);
  }

  // required float gatheringZoneY = 26;
  if (has_gatheringzoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->gatheringzoney(), output);
  }

  // required float gatheringZoneZ = 27;
  if (has_gatheringzonez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->gatheringzonez(), output);
  }

  // required float gatheringZoneSizeX = 28;
  if (has_gatheringzonesizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->gatheringzonesizex(), output);
  }

  // required float gatheringZoneSizeY = 29;
  if (has_gatheringzonesizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->gatheringzonesizey(), output);
  }

  // required float gatheringZoneSizeZ = 30;
  if (has_gatheringzonesizez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->gatheringzonesizez(), output);
  }

  // repeated .robogenMessage.Resource resources = 31;
  for (unsigned int i = 0, n = this->resources_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->resources(i), output);
  }

  // required int32 swarmSize = 32;
  if (has_swarmsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->swarmsize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.SimulatorConf)
}

::google::protobuf::uint8* SimulatorConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.SimulatorConf)
  // required float terrainWidth = 1;
  if (has_terrainwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->terrainwidth(), target);
  }

  // required float terrainLength = 2;
  if (has_terrainlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->terrainlength(), target);
  }

  // repeated .robogenMessage.Obstacle obstacles = 3;
  for (unsigned int i = 0, n = this->obstacles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->obstacles(i), false, target);
  }

  // required string scenario = 4;
  if (has_scenario()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenario().data(), this->scenario().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.scenario");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->scenario(), target);
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  for (unsigned int i = 0, n = this->lightsources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->lightsources(i), false, target);
  }

  // required float timeStep = 6;
  if (has_timestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->timestep(), target);
  }

  // required int32 nTimeSteps = 7;
  if (has_ntimesteps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ntimesteps(), target);
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  for (unsigned int i = 0, n = this->startpositions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->startpositions(i), false, target);
  }

  // required int32 actuationPeriod = 9;
  if (has_actuationperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->actuationperiod(), target);
  }

  // required float terrainFriction = 10;
  if (has_terrainfriction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->terrainfriction(), target);
  }

  // required float sensorNoiseLevel = 11;
  if (has_sensornoiselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sensornoiselevel(), target);
  }

  // required float motorNoiseLevel = 12;
  if (has_motornoiselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->motornoiselevel(), target);
  }

  // required bool capAcceleration = 13;
  if (has_capacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->capacceleration(), target);
  }

  // required float maxLinearAcceleration = 14;
  if (has_maxlinearacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maxlinearacceleration(), target);
  }

  // required float maxAngularAcceleration = 15;
  if (has_maxangularacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maxangularacceleration(), target);
  }

  // required int32 maxDirectionShiftsPerSecond = 16;
  if (has_maxdirectionshiftspersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->maxdirectionshiftspersecond(), target);
  }

  // required float gravityX = 17;
  if (has_gravityx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->gravityx(), target);
  }

  // required float gravityY = 18;
  if (has_gravityy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->gravityy(), target);
  }

  // required float gravityZ = 19;
  if (has_gravityz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->gravityz(), target);
  }

  // required int32 terrainType = 20;
  if (has_terraintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->terraintype(), target);
  }

  // required float terrainHeight = 21;
  if (has_terrainheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->terrainheight(), target);
  }

  // required string terrainHeightFieldFileName = 22;
  if (has_terrainheightfieldfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->terrainheightfieldfilename().data(), this->terrainheightfieldfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "robogenMessage.SimulatorConf.terrainHeightFieldFileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->terrainheightfieldfilename(), target);
  }

  // required bool disallowObstacleCollisions = 23;
  if (has_disallowobstaclecollisions()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->disallowobstaclecollisions(), target);
  }

  // required uint32 obstacleOverlapPolicy = 24;
  if (has_obstacleoverlappolicy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->obstacleoverlappolicy(), target);
  }

  // required float gatheringZoneX = 25;
  if (has_gatheringzonex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->gatheringzonex(), target);
  }

  // required float gatheringZoneY = 26;
  if (has_gatheringzoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->gatheringzoney(), target);
  }

  // required float gatheringZoneZ = 27;
  if (has_gatheringzonez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->gatheringzonez(), target);
  }

  // required float gatheringZoneSizeX = 28;
  if (has_gatheringzonesizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->gatheringzonesizex(), target);
  }

  // required float gatheringZoneSizeY = 29;
  if (has_gatheringzonesizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->gatheringzonesizey(), target);
  }

  // required float gatheringZoneSizeZ = 30;
  if (has_gatheringzonesizez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->gatheringzonesizez(), target);
  }

  // repeated .robogenMessage.Resource resources = 31;
  for (unsigned int i = 0, n = this->resources_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->resources(i), false, target);
  }

  // required int32 swarmSize = 32;
  if (has_swarmsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->swarmsize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.SimulatorConf)
  return target;
}

int SimulatorConf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.SimulatorConf)
  int total_size = 0;

  if (has_terrainwidth()) {
    // required float terrainWidth = 1;
    total_size += 1 + 4;
  }

  if (has_terrainlength()) {
    // required float terrainLength = 2;
    total_size += 1 + 4;
  }

  if (has_scenario()) {
    // required string scenario = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scenario());
  }

  if (has_timestep()) {
    // required float timeStep = 6;
    total_size += 1 + 4;
  }

  if (has_ntimesteps()) {
    // required int32 nTimeSteps = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntimesteps());
  }

  if (has_actuationperiod()) {
    // required int32 actuationPeriod = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actuationperiod());
  }

  if (has_terrainfriction()) {
    // required float terrainFriction = 10;
    total_size += 1 + 4;
  }

  if (has_sensornoiselevel()) {
    // required float sensorNoiseLevel = 11;
    total_size += 1 + 4;
  }

  if (has_motornoiselevel()) {
    // required float motorNoiseLevel = 12;
    total_size += 1 + 4;
  }

  if (has_capacceleration()) {
    // required bool capAcceleration = 13;
    total_size += 1 + 1;
  }

  if (has_maxlinearacceleration()) {
    // required float maxLinearAcceleration = 14;
    total_size += 1 + 4;
  }

  if (has_maxangularacceleration()) {
    // required float maxAngularAcceleration = 15;
    total_size += 1 + 4;
  }

  if (has_maxdirectionshiftspersecond()) {
    // required int32 maxDirectionShiftsPerSecond = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxdirectionshiftspersecond());
  }

  if (has_gravityx()) {
    // required float gravityX = 17;
    total_size += 2 + 4;
  }

  if (has_gravityy()) {
    // required float gravityY = 18;
    total_size += 2 + 4;
  }

  if (has_gravityz()) {
    // required float gravityZ = 19;
    total_size += 2 + 4;
  }

  if (has_terraintype()) {
    // required int32 terrainType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->terraintype());
  }

  if (has_terrainheight()) {
    // required float terrainHeight = 21;
    total_size += 2 + 4;
  }

  if (has_terrainheightfieldfilename()) {
    // required string terrainHeightFieldFileName = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->terrainheightfieldfilename());
  }

  if (has_disallowobstaclecollisions()) {
    // required bool disallowObstacleCollisions = 23;
    total_size += 2 + 1;
  }

  if (has_obstacleoverlappolicy()) {
    // required uint32 obstacleOverlapPolicy = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obstacleoverlappolicy());
  }

  if (has_gatheringzonex()) {
    // required float gatheringZoneX = 25;
    total_size += 2 + 4;
  }

  if (has_gatheringzoney()) {
    // required float gatheringZoneY = 26;
    total_size += 2 + 4;
  }

  if (has_gatheringzonez()) {
    // required float gatheringZoneZ = 27;
    total_size += 2 + 4;
  }

  if (has_gatheringzonesizex()) {
    // required float gatheringZoneSizeX = 28;
    total_size += 2 + 4;
  }

  if (has_gatheringzonesizey()) {
    // required float gatheringZoneSizeY = 29;
    total_size += 2 + 4;
  }

  if (has_gatheringzonesizez()) {
    // required float gatheringZoneSizeZ = 30;
    total_size += 2 + 4;
  }

  if (has_swarmsize()) {
    // required int32 swarmSize = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->swarmsize());
  }

  return total_size;
}
int SimulatorConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.SimulatorConf)
  int total_size = 0;

  if (((_has_bits_[0] & 0xbfffff6b) ^ 0xbfffff6b) == 0) {  // All required fields are present.
    // required float terrainWidth = 1;
    total_size += 1 + 4;

    // required float terrainLength = 2;
    total_size += 1 + 4;

    // required string scenario = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scenario());

    // required float timeStep = 6;
    total_size += 1 + 4;

    // required int32 nTimeSteps = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntimesteps());

    // required int32 actuationPeriod = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actuationperiod());

    // required float terrainFriction = 10;
    total_size += 1 + 4;

    // required float sensorNoiseLevel = 11;
    total_size += 1 + 4;

    // required float motorNoiseLevel = 12;
    total_size += 1 + 4;

    // required bool capAcceleration = 13;
    total_size += 1 + 1;

    // required float maxLinearAcceleration = 14;
    total_size += 1 + 4;

    // required float maxAngularAcceleration = 15;
    total_size += 1 + 4;

    // required int32 maxDirectionShiftsPerSecond = 16;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->maxdirectionshiftspersecond());

    // required float gravityX = 17;
    total_size += 2 + 4;

    // required float gravityY = 18;
    total_size += 2 + 4;

    // required float gravityZ = 19;
    total_size += 2 + 4;

    // required int32 terrainType = 20;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->terraintype());

    // required float terrainHeight = 21;
    total_size += 2 + 4;

    // required string terrainHeightFieldFileName = 22;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->terrainheightfieldfilename());

    // required bool disallowObstacleCollisions = 23;
    total_size += 2 + 1;

    // required uint32 obstacleOverlapPolicy = 24;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->obstacleoverlappolicy());

    // required float gatheringZoneX = 25;
    total_size += 2 + 4;

    // required float gatheringZoneY = 26;
    total_size += 2 + 4;

    // required float gatheringZoneZ = 27;
    total_size += 2 + 4;

    // required float gatheringZoneSizeX = 28;
    total_size += 2 + 4;

    // required float gatheringZoneSizeY = 29;
    total_size += 2 + 4;

    // required float gatheringZoneSizeZ = 30;
    total_size += 2 + 4;

    // required int32 swarmSize = 32;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->swarmsize());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .robogenMessage.Obstacle obstacles = 3;
  total_size += 1 * this->obstacles_size();
  for (int i = 0; i < this->obstacles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacles(i));
  }

  // repeated .robogenMessage.LightSource lightSources = 5;
  total_size += 1 * this->lightsources_size();
  for (int i = 0; i < this->lightsources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lightsources(i));
  }

  // repeated .robogenMessage.StartPosition startPositions = 8;
  total_size += 1 * this->startpositions_size();
  for (int i = 0; i < this->startpositions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->startpositions(i));
  }

  // repeated .robogenMessage.Resource resources = 31;
  total_size += 2 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resources(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimulatorConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.SimulatorConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimulatorConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.SimulatorConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.SimulatorConf)
    MergeFrom(*source);
  }
}

void SimulatorConf::MergeFrom(const SimulatorConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.SimulatorConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  obstacles_.MergeFrom(from.obstacles_);
  lightsources_.MergeFrom(from.lightsources_);
  startpositions_.MergeFrom(from.startpositions_);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_terrainwidth()) {
      set_terrainwidth(from.terrainwidth());
    }
    if (from.has_terrainlength()) {
      set_terrainlength(from.terrainlength());
    }
    if (from.has_scenario()) {
      set_has_scenario();
      scenario_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scenario_);
    }
    if (from.has_timestep()) {
      set_timestep(from.timestep());
    }
    if (from.has_ntimesteps()) {
      set_ntimesteps(from.ntimesteps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_actuationperiod()) {
      set_actuationperiod(from.actuationperiod());
    }
    if (from.has_terrainfriction()) {
      set_terrainfriction(from.terrainfriction());
    }
    if (from.has_sensornoiselevel()) {
      set_sensornoiselevel(from.sensornoiselevel());
    }
    if (from.has_motornoiselevel()) {
      set_motornoiselevel(from.motornoiselevel());
    }
    if (from.has_capacceleration()) {
      set_capacceleration(from.capacceleration());
    }
    if (from.has_maxlinearacceleration()) {
      set_maxlinearacceleration(from.maxlinearacceleration());
    }
    if (from.has_maxangularacceleration()) {
      set_maxangularacceleration(from.maxangularacceleration());
    }
    if (from.has_maxdirectionshiftspersecond()) {
      set_maxdirectionshiftspersecond(from.maxdirectionshiftspersecond());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gravityx()) {
      set_gravityx(from.gravityx());
    }
    if (from.has_gravityy()) {
      set_gravityy(from.gravityy());
    }
    if (from.has_gravityz()) {
      set_gravityz(from.gravityz());
    }
    if (from.has_terraintype()) {
      set_terraintype(from.terraintype());
    }
    if (from.has_terrainheight()) {
      set_terrainheight(from.terrainheight());
    }
    if (from.has_terrainheightfieldfilename()) {
      set_has_terrainheightfieldfilename();
      terrainheightfieldfilename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.terrainheightfieldfilename_);
    }
    if (from.has_disallowobstaclecollisions()) {
      set_disallowobstaclecollisions(from.disallowobstaclecollisions());
    }
    if (from.has_obstacleoverlappolicy()) {
      set_obstacleoverlappolicy(from.obstacleoverlappolicy());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gatheringzonex()) {
      set_gatheringzonex(from.gatheringzonex());
    }
    if (from.has_gatheringzoney()) {
      set_gatheringzoney(from.gatheringzoney());
    }
    if (from.has_gatheringzonez()) {
      set_gatheringzonez(from.gatheringzonez());
    }
    if (from.has_gatheringzonesizex()) {
      set_gatheringzonesizex(from.gatheringzonesizex());
    }
    if (from.has_gatheringzonesizey()) {
      set_gatheringzonesizey(from.gatheringzonesizey());
    }
    if (from.has_gatheringzonesizez()) {
      set_gatheringzonesizez(from.gatheringzonesizez());
    }
    if (from.has_swarmsize()) {
      set_swarmsize(from.swarmsize());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SimulatorConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.SimulatorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorConf::CopyFrom(const SimulatorConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.SimulatorConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorConf::IsInitialized() const {
  if ((_has_bits_[0] & 0xbfffff6b) != 0xbfffff6b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->obstacles())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->lightsources())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->startpositions())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->resources())) return false;
  return true;
}

void SimulatorConf::Swap(SimulatorConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorConf::InternalSwap(SimulatorConf* other) {
  std::swap(terrainwidth_, other->terrainwidth_);
  std::swap(terrainlength_, other->terrainlength_);
  obstacles_.UnsafeArenaSwap(&other->obstacles_);
  scenario_.Swap(&other->scenario_);
  lightsources_.UnsafeArenaSwap(&other->lightsources_);
  std::swap(timestep_, other->timestep_);
  std::swap(ntimesteps_, other->ntimesteps_);
  startpositions_.UnsafeArenaSwap(&other->startpositions_);
  std::swap(actuationperiod_, other->actuationperiod_);
  std::swap(terrainfriction_, other->terrainfriction_);
  std::swap(sensornoiselevel_, other->sensornoiselevel_);
  std::swap(motornoiselevel_, other->motornoiselevel_);
  std::swap(capacceleration_, other->capacceleration_);
  std::swap(maxlinearacceleration_, other->maxlinearacceleration_);
  std::swap(maxangularacceleration_, other->maxangularacceleration_);
  std::swap(maxdirectionshiftspersecond_, other->maxdirectionshiftspersecond_);
  std::swap(gravityx_, other->gravityx_);
  std::swap(gravityy_, other->gravityy_);
  std::swap(gravityz_, other->gravityz_);
  std::swap(terraintype_, other->terraintype_);
  std::swap(terrainheight_, other->terrainheight_);
  terrainheightfieldfilename_.Swap(&other->terrainheightfieldfilename_);
  std::swap(disallowobstaclecollisions_, other->disallowobstaclecollisions_);
  std::swap(obstacleoverlappolicy_, other->obstacleoverlappolicy_);
  std::swap(gatheringzonex_, other->gatheringzonex_);
  std::swap(gatheringzoney_, other->gatheringzoney_);
  std::swap(gatheringzonez_, other->gatheringzonez_);
  std::swap(gatheringzonesizex_, other->gatheringzonesizex_);
  std::swap(gatheringzonesizey_, other->gatheringzonesizey_);
  std::swap(gatheringzonesizez_, other->gatheringzonesizez_);
  resources_.UnsafeArenaSwap(&other->resources_);
  std::swap(swarmsize_, other->swarmsize_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimulatorConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimulatorConf_descriptor_;
  metadata.reflection = SimulatorConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimulatorConf

// required float terrainWidth = 1;
bool SimulatorConf::has_terrainwidth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SimulatorConf::set_has_terrainwidth() {
  _has_bits_[0] |= 0x00000001u;
}
void SimulatorConf::clear_has_terrainwidth() {
  _has_bits_[0] &= ~0x00000001u;
}
void SimulatorConf::clear_terrainwidth() {
  terrainwidth_ = 0;
  clear_has_terrainwidth();
}
 float SimulatorConf::terrainwidth() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainWidth)
  return terrainwidth_;
}
 void SimulatorConf::set_terrainwidth(float value) {
  set_has_terrainwidth();
  terrainwidth_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainWidth)
}

// required float terrainLength = 2;
bool SimulatorConf::has_terrainlength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SimulatorConf::set_has_terrainlength() {
  _has_bits_[0] |= 0x00000002u;
}
void SimulatorConf::clear_has_terrainlength() {
  _has_bits_[0] &= ~0x00000002u;
}
void SimulatorConf::clear_terrainlength() {
  terrainlength_ = 0;
  clear_has_terrainlength();
}
 float SimulatorConf::terrainlength() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainLength)
  return terrainlength_;
}
 void SimulatorConf::set_terrainlength(float value) {
  set_has_terrainlength();
  terrainlength_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainLength)
}

// repeated .robogenMessage.Obstacle obstacles = 3;
int SimulatorConf::obstacles_size() const {
  return obstacles_.size();
}
void SimulatorConf::clear_obstacles() {
  obstacles_.Clear();
}
const ::robogenMessage::Obstacle& SimulatorConf::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Get(index);
}
::robogenMessage::Obstacle* SimulatorConf::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Mutable(index);
}
::robogenMessage::Obstacle* SimulatorConf::add_obstacles() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.obstacles)
  return obstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >*
SimulatorConf::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.obstacles)
  return &obstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Obstacle >&
SimulatorConf::obstacles() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.obstacles)
  return obstacles_;
}

// required string scenario = 4;
bool SimulatorConf::has_scenario() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SimulatorConf::set_has_scenario() {
  _has_bits_[0] |= 0x00000008u;
}
void SimulatorConf::clear_has_scenario() {
  _has_bits_[0] &= ~0x00000008u;
}
void SimulatorConf::clear_scenario() {
  scenario_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_scenario();
}
 const ::std::string& SimulatorConf::scenario() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.scenario)
  return scenario_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulatorConf::set_scenario(const ::std::string& value) {
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.scenario)
}
 void SimulatorConf::set_scenario(const char* value) {
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.SimulatorConf.scenario)
}
 void SimulatorConf::set_scenario(const char* value, size_t size) {
  set_has_scenario();
  scenario_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.SimulatorConf.scenario)
}
 ::std::string* SimulatorConf::mutable_scenario() {
  set_has_scenario();
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.scenario)
  return scenario_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimulatorConf::release_scenario() {
  // @@protoc_insertion_point(field_release:robogenMessage.SimulatorConf.scenario)
  clear_has_scenario();
  return scenario_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulatorConf::set_allocated_scenario(::std::string* scenario) {
  if (scenario != NULL) {
    set_has_scenario();
  } else {
    clear_has_scenario();
  }
  scenario_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scenario);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.SimulatorConf.scenario)
}

// repeated .robogenMessage.LightSource lightSources = 5;
int SimulatorConf::lightsources_size() const {
  return lightsources_.size();
}
void SimulatorConf::clear_lightsources() {
  lightsources_.Clear();
}
const ::robogenMessage::LightSource& SimulatorConf::lightsources(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Get(index);
}
::robogenMessage::LightSource* SimulatorConf::mutable_lightsources(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Mutable(index);
}
::robogenMessage::LightSource* SimulatorConf::add_lightsources() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.lightSources)
  return lightsources_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >*
SimulatorConf::mutable_lightsources() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.lightSources)
  return &lightsources_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::LightSource >&
SimulatorConf::lightsources() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.lightSources)
  return lightsources_;
}

// required float timeStep = 6;
bool SimulatorConf::has_timestep() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SimulatorConf::set_has_timestep() {
  _has_bits_[0] |= 0x00000020u;
}
void SimulatorConf::clear_has_timestep() {
  _has_bits_[0] &= ~0x00000020u;
}
void SimulatorConf::clear_timestep() {
  timestep_ = 0;
  clear_has_timestep();
}
 float SimulatorConf::timestep() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.timeStep)
  return timestep_;
}
 void SimulatorConf::set_timestep(float value) {
  set_has_timestep();
  timestep_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.timeStep)
}

// required int32 nTimeSteps = 7;
bool SimulatorConf::has_ntimesteps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SimulatorConf::set_has_ntimesteps() {
  _has_bits_[0] |= 0x00000040u;
}
void SimulatorConf::clear_has_ntimesteps() {
  _has_bits_[0] &= ~0x00000040u;
}
void SimulatorConf::clear_ntimesteps() {
  ntimesteps_ = 0;
  clear_has_ntimesteps();
}
 ::google::protobuf::int32 SimulatorConf::ntimesteps() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.nTimeSteps)
  return ntimesteps_;
}
 void SimulatorConf::set_ntimesteps(::google::protobuf::int32 value) {
  set_has_ntimesteps();
  ntimesteps_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.nTimeSteps)
}

// repeated .robogenMessage.StartPosition startPositions = 8;
int SimulatorConf::startpositions_size() const {
  return startpositions_.size();
}
void SimulatorConf::clear_startpositions() {
  startpositions_.Clear();
}
const ::robogenMessage::StartPosition& SimulatorConf::startpositions(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Get(index);
}
::robogenMessage::StartPosition* SimulatorConf::mutable_startpositions(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Mutable(index);
}
::robogenMessage::StartPosition* SimulatorConf::add_startpositions() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.startPositions)
  return startpositions_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >*
SimulatorConf::mutable_startpositions() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.startPositions)
  return &startpositions_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::StartPosition >&
SimulatorConf::startpositions() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.startPositions)
  return startpositions_;
}

// required int32 actuationPeriod = 9;
bool SimulatorConf::has_actuationperiod() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SimulatorConf::set_has_actuationperiod() {
  _has_bits_[0] |= 0x00000100u;
}
void SimulatorConf::clear_has_actuationperiod() {
  _has_bits_[0] &= ~0x00000100u;
}
void SimulatorConf::clear_actuationperiod() {
  actuationperiod_ = 0;
  clear_has_actuationperiod();
}
 ::google::protobuf::int32 SimulatorConf::actuationperiod() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.actuationPeriod)
  return actuationperiod_;
}
 void SimulatorConf::set_actuationperiod(::google::protobuf::int32 value) {
  set_has_actuationperiod();
  actuationperiod_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.actuationPeriod)
}

// required float terrainFriction = 10;
bool SimulatorConf::has_terrainfriction() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SimulatorConf::set_has_terrainfriction() {
  _has_bits_[0] |= 0x00000200u;
}
void SimulatorConf::clear_has_terrainfriction() {
  _has_bits_[0] &= ~0x00000200u;
}
void SimulatorConf::clear_terrainfriction() {
  terrainfriction_ = 0;
  clear_has_terrainfriction();
}
 float SimulatorConf::terrainfriction() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainFriction)
  return terrainfriction_;
}
 void SimulatorConf::set_terrainfriction(float value) {
  set_has_terrainfriction();
  terrainfriction_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainFriction)
}

// required float sensorNoiseLevel = 11;
bool SimulatorConf::has_sensornoiselevel() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SimulatorConf::set_has_sensornoiselevel() {
  _has_bits_[0] |= 0x00000400u;
}
void SimulatorConf::clear_has_sensornoiselevel() {
  _has_bits_[0] &= ~0x00000400u;
}
void SimulatorConf::clear_sensornoiselevel() {
  sensornoiselevel_ = 0;
  clear_has_sensornoiselevel();
}
 float SimulatorConf::sensornoiselevel() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.sensorNoiseLevel)
  return sensornoiselevel_;
}
 void SimulatorConf::set_sensornoiselevel(float value) {
  set_has_sensornoiselevel();
  sensornoiselevel_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.sensorNoiseLevel)
}

// required float motorNoiseLevel = 12;
bool SimulatorConf::has_motornoiselevel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SimulatorConf::set_has_motornoiselevel() {
  _has_bits_[0] |= 0x00000800u;
}
void SimulatorConf::clear_has_motornoiselevel() {
  _has_bits_[0] &= ~0x00000800u;
}
void SimulatorConf::clear_motornoiselevel() {
  motornoiselevel_ = 0;
  clear_has_motornoiselevel();
}
 float SimulatorConf::motornoiselevel() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.motorNoiseLevel)
  return motornoiselevel_;
}
 void SimulatorConf::set_motornoiselevel(float value) {
  set_has_motornoiselevel();
  motornoiselevel_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.motorNoiseLevel)
}

// required bool capAcceleration = 13;
bool SimulatorConf::has_capacceleration() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SimulatorConf::set_has_capacceleration() {
  _has_bits_[0] |= 0x00001000u;
}
void SimulatorConf::clear_has_capacceleration() {
  _has_bits_[0] &= ~0x00001000u;
}
void SimulatorConf::clear_capacceleration() {
  capacceleration_ = false;
  clear_has_capacceleration();
}
 bool SimulatorConf::capacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.capAcceleration)
  return capacceleration_;
}
 void SimulatorConf::set_capacceleration(bool value) {
  set_has_capacceleration();
  capacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.capAcceleration)
}

// required float maxLinearAcceleration = 14;
bool SimulatorConf::has_maxlinearacceleration() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SimulatorConf::set_has_maxlinearacceleration() {
  _has_bits_[0] |= 0x00002000u;
}
void SimulatorConf::clear_has_maxlinearacceleration() {
  _has_bits_[0] &= ~0x00002000u;
}
void SimulatorConf::clear_maxlinearacceleration() {
  maxlinearacceleration_ = 0;
  clear_has_maxlinearacceleration();
}
 float SimulatorConf::maxlinearacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxLinearAcceleration)
  return maxlinearacceleration_;
}
 void SimulatorConf::set_maxlinearacceleration(float value) {
  set_has_maxlinearacceleration();
  maxlinearacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxLinearAcceleration)
}

// required float maxAngularAcceleration = 15;
bool SimulatorConf::has_maxangularacceleration() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SimulatorConf::set_has_maxangularacceleration() {
  _has_bits_[0] |= 0x00004000u;
}
void SimulatorConf::clear_has_maxangularacceleration() {
  _has_bits_[0] &= ~0x00004000u;
}
void SimulatorConf::clear_maxangularacceleration() {
  maxangularacceleration_ = 0;
  clear_has_maxangularacceleration();
}
 float SimulatorConf::maxangularacceleration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxAngularAcceleration)
  return maxangularacceleration_;
}
 void SimulatorConf::set_maxangularacceleration(float value) {
  set_has_maxangularacceleration();
  maxangularacceleration_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxAngularAcceleration)
}

// required int32 maxDirectionShiftsPerSecond = 16;
bool SimulatorConf::has_maxdirectionshiftspersecond() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void SimulatorConf::set_has_maxdirectionshiftspersecond() {
  _has_bits_[0] |= 0x00008000u;
}
void SimulatorConf::clear_has_maxdirectionshiftspersecond() {
  _has_bits_[0] &= ~0x00008000u;
}
void SimulatorConf::clear_maxdirectionshiftspersecond() {
  maxdirectionshiftspersecond_ = 0;
  clear_has_maxdirectionshiftspersecond();
}
 ::google::protobuf::int32 SimulatorConf::maxdirectionshiftspersecond() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.maxDirectionShiftsPerSecond)
  return maxdirectionshiftspersecond_;
}
 void SimulatorConf::set_maxdirectionshiftspersecond(::google::protobuf::int32 value) {
  set_has_maxdirectionshiftspersecond();
  maxdirectionshiftspersecond_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.maxDirectionShiftsPerSecond)
}

// required float gravityX = 17;
bool SimulatorConf::has_gravityx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void SimulatorConf::set_has_gravityx() {
  _has_bits_[0] |= 0x00010000u;
}
void SimulatorConf::clear_has_gravityx() {
  _has_bits_[0] &= ~0x00010000u;
}
void SimulatorConf::clear_gravityx() {
  gravityx_ = 0;
  clear_has_gravityx();
}
 float SimulatorConf::gravityx() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityX)
  return gravityx_;
}
 void SimulatorConf::set_gravityx(float value) {
  set_has_gravityx();
  gravityx_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityX)
}

// required float gravityY = 18;
bool SimulatorConf::has_gravityy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void SimulatorConf::set_has_gravityy() {
  _has_bits_[0] |= 0x00020000u;
}
void SimulatorConf::clear_has_gravityy() {
  _has_bits_[0] &= ~0x00020000u;
}
void SimulatorConf::clear_gravityy() {
  gravityy_ = 0;
  clear_has_gravityy();
}
 float SimulatorConf::gravityy() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityY)
  return gravityy_;
}
 void SimulatorConf::set_gravityy(float value) {
  set_has_gravityy();
  gravityy_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityY)
}

// required float gravityZ = 19;
bool SimulatorConf::has_gravityz() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void SimulatorConf::set_has_gravityz() {
  _has_bits_[0] |= 0x00040000u;
}
void SimulatorConf::clear_has_gravityz() {
  _has_bits_[0] &= ~0x00040000u;
}
void SimulatorConf::clear_gravityz() {
  gravityz_ = 0;
  clear_has_gravityz();
}
 float SimulatorConf::gravityz() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gravityZ)
  return gravityz_;
}
 void SimulatorConf::set_gravityz(float value) {
  set_has_gravityz();
  gravityz_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gravityZ)
}

// required int32 terrainType = 20;
bool SimulatorConf::has_terraintype() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void SimulatorConf::set_has_terraintype() {
  _has_bits_[0] |= 0x00080000u;
}
void SimulatorConf::clear_has_terraintype() {
  _has_bits_[0] &= ~0x00080000u;
}
void SimulatorConf::clear_terraintype() {
  terraintype_ = 0;
  clear_has_terraintype();
}
 ::google::protobuf::int32 SimulatorConf::terraintype() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainType)
  return terraintype_;
}
 void SimulatorConf::set_terraintype(::google::protobuf::int32 value) {
  set_has_terraintype();
  terraintype_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainType)
}

// required float terrainHeight = 21;
bool SimulatorConf::has_terrainheight() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void SimulatorConf::set_has_terrainheight() {
  _has_bits_[0] |= 0x00100000u;
}
void SimulatorConf::clear_has_terrainheight() {
  _has_bits_[0] &= ~0x00100000u;
}
void SimulatorConf::clear_terrainheight() {
  terrainheight_ = 0;
  clear_has_terrainheight();
}
 float SimulatorConf::terrainheight() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainHeight)
  return terrainheight_;
}
 void SimulatorConf::set_terrainheight(float value) {
  set_has_terrainheight();
  terrainheight_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainHeight)
}

// required string terrainHeightFieldFileName = 22;
bool SimulatorConf::has_terrainheightfieldfilename() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void SimulatorConf::set_has_terrainheightfieldfilename() {
  _has_bits_[0] |= 0x00200000u;
}
void SimulatorConf::clear_has_terrainheightfieldfilename() {
  _has_bits_[0] &= ~0x00200000u;
}
void SimulatorConf::clear_terrainheightfieldfilename() {
  terrainheightfieldfilename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_terrainheightfieldfilename();
}
 const ::std::string& SimulatorConf::terrainheightfieldfilename() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  return terrainheightfieldfilename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulatorConf::set_terrainheightfieldfilename(const ::std::string& value) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
 void SimulatorConf::set_terrainheightfieldfilename(const char* value) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
 void SimulatorConf::set_terrainheightfieldfilename(const char* value, size_t size) {
  set_has_terrainheightfieldfilename();
  terrainheightfieldfilename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}
 ::std::string* SimulatorConf::mutable_terrainheightfieldfilename() {
  set_has_terrainheightfieldfilename();
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  return terrainheightfieldfilename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SimulatorConf::release_terrainheightfieldfilename() {
  // @@protoc_insertion_point(field_release:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
  clear_has_terrainheightfieldfilename();
  return terrainheightfieldfilename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SimulatorConf::set_allocated_terrainheightfieldfilename(::std::string* terrainheightfieldfilename) {
  if (terrainheightfieldfilename != NULL) {
    set_has_terrainheightfieldfilename();
  } else {
    clear_has_terrainheightfieldfilename();
  }
  terrainheightfieldfilename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), terrainheightfieldfilename);
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.SimulatorConf.terrainHeightFieldFileName)
}

// required bool disallowObstacleCollisions = 23;
bool SimulatorConf::has_disallowobstaclecollisions() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void SimulatorConf::set_has_disallowobstaclecollisions() {
  _has_bits_[0] |= 0x00400000u;
}
void SimulatorConf::clear_has_disallowobstaclecollisions() {
  _has_bits_[0] &= ~0x00400000u;
}
void SimulatorConf::clear_disallowobstaclecollisions() {
  disallowobstaclecollisions_ = false;
  clear_has_disallowobstaclecollisions();
}
 bool SimulatorConf::disallowobstaclecollisions() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.disallowObstacleCollisions)
  return disallowobstaclecollisions_;
}
 void SimulatorConf::set_disallowobstaclecollisions(bool value) {
  set_has_disallowobstaclecollisions();
  disallowobstaclecollisions_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.disallowObstacleCollisions)
}

// required uint32 obstacleOverlapPolicy = 24;
bool SimulatorConf::has_obstacleoverlappolicy() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void SimulatorConf::set_has_obstacleoverlappolicy() {
  _has_bits_[0] |= 0x00800000u;
}
void SimulatorConf::clear_has_obstacleoverlappolicy() {
  _has_bits_[0] &= ~0x00800000u;
}
void SimulatorConf::clear_obstacleoverlappolicy() {
  obstacleoverlappolicy_ = 0u;
  clear_has_obstacleoverlappolicy();
}
 ::google::protobuf::uint32 SimulatorConf::obstacleoverlappolicy() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.obstacleOverlapPolicy)
  return obstacleoverlappolicy_;
}
 void SimulatorConf::set_obstacleoverlappolicy(::google::protobuf::uint32 value) {
  set_has_obstacleoverlappolicy();
  obstacleoverlappolicy_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.obstacleOverlapPolicy)
}

// required float gatheringZoneX = 25;
bool SimulatorConf::has_gatheringzonex() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void SimulatorConf::set_has_gatheringzonex() {
  _has_bits_[0] |= 0x01000000u;
}
void SimulatorConf::clear_has_gatheringzonex() {
  _has_bits_[0] &= ~0x01000000u;
}
void SimulatorConf::clear_gatheringzonex() {
  gatheringzonex_ = 0;
  clear_has_gatheringzonex();
}
 float SimulatorConf::gatheringzonex() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneX)
  return gatheringzonex_;
}
 void SimulatorConf::set_gatheringzonex(float value) {
  set_has_gatheringzonex();
  gatheringzonex_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneX)
}

// required float gatheringZoneY = 26;
bool SimulatorConf::has_gatheringzoney() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void SimulatorConf::set_has_gatheringzoney() {
  _has_bits_[0] |= 0x02000000u;
}
void SimulatorConf::clear_has_gatheringzoney() {
  _has_bits_[0] &= ~0x02000000u;
}
void SimulatorConf::clear_gatheringzoney() {
  gatheringzoney_ = 0;
  clear_has_gatheringzoney();
}
 float SimulatorConf::gatheringzoney() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneY)
  return gatheringzoney_;
}
 void SimulatorConf::set_gatheringzoney(float value) {
  set_has_gatheringzoney();
  gatheringzoney_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneY)
}

// required float gatheringZoneZ = 27;
bool SimulatorConf::has_gatheringzonez() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void SimulatorConf::set_has_gatheringzonez() {
  _has_bits_[0] |= 0x04000000u;
}
void SimulatorConf::clear_has_gatheringzonez() {
  _has_bits_[0] &= ~0x04000000u;
}
void SimulatorConf::clear_gatheringzonez() {
  gatheringzonez_ = 0;
  clear_has_gatheringzonez();
}
 float SimulatorConf::gatheringzonez() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneZ)
  return gatheringzonez_;
}
 void SimulatorConf::set_gatheringzonez(float value) {
  set_has_gatheringzonez();
  gatheringzonez_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneZ)
}

// required float gatheringZoneSizeX = 28;
bool SimulatorConf::has_gatheringzonesizex() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void SimulatorConf::set_has_gatheringzonesizex() {
  _has_bits_[0] |= 0x08000000u;
}
void SimulatorConf::clear_has_gatheringzonesizex() {
  _has_bits_[0] &= ~0x08000000u;
}
void SimulatorConf::clear_gatheringzonesizex() {
  gatheringzonesizex_ = 0;
  clear_has_gatheringzonesizex();
}
 float SimulatorConf::gatheringzonesizex() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneSizeX)
  return gatheringzonesizex_;
}
 void SimulatorConf::set_gatheringzonesizex(float value) {
  set_has_gatheringzonesizex();
  gatheringzonesizex_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneSizeX)
}

// required float gatheringZoneSizeY = 29;
bool SimulatorConf::has_gatheringzonesizey() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void SimulatorConf::set_has_gatheringzonesizey() {
  _has_bits_[0] |= 0x10000000u;
}
void SimulatorConf::clear_has_gatheringzonesizey() {
  _has_bits_[0] &= ~0x10000000u;
}
void SimulatorConf::clear_gatheringzonesizey() {
  gatheringzonesizey_ = 0;
  clear_has_gatheringzonesizey();
}
 float SimulatorConf::gatheringzonesizey() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneSizeY)
  return gatheringzonesizey_;
}
 void SimulatorConf::set_gatheringzonesizey(float value) {
  set_has_gatheringzonesizey();
  gatheringzonesizey_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneSizeY)
}

// required float gatheringZoneSizeZ = 30;
bool SimulatorConf::has_gatheringzonesizez() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void SimulatorConf::set_has_gatheringzonesizez() {
  _has_bits_[0] |= 0x20000000u;
}
void SimulatorConf::clear_has_gatheringzonesizez() {
  _has_bits_[0] &= ~0x20000000u;
}
void SimulatorConf::clear_gatheringzonesizez() {
  gatheringzonesizez_ = 0;
  clear_has_gatheringzonesizez();
}
 float SimulatorConf::gatheringzonesizez() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.gatheringZoneSizeZ)
  return gatheringzonesizez_;
}
 void SimulatorConf::set_gatheringzonesizez(float value) {
  set_has_gatheringzonesizez();
  gatheringzonesizez_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.gatheringZoneSizeZ)
}

// repeated .robogenMessage.Resource resources = 31;
int SimulatorConf::resources_size() const {
  return resources_.size();
}
void SimulatorConf::clear_resources() {
  resources_.Clear();
}
const ::robogenMessage::Resource& SimulatorConf::resources(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.resources)
  return resources_.Get(index);
}
::robogenMessage::Resource* SimulatorConf::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:robogenMessage.SimulatorConf.resources)
  return resources_.Mutable(index);
}
::robogenMessage::Resource* SimulatorConf::add_resources() {
  // @@protoc_insertion_point(field_add:robogenMessage.SimulatorConf.resources)
  return resources_.Add();
}
::google::protobuf::RepeatedPtrField< ::robogenMessage::Resource >*
SimulatorConf::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.SimulatorConf.resources)
  return &resources_;
}
const ::google::protobuf::RepeatedPtrField< ::robogenMessage::Resource >&
SimulatorConf::resources() const {
  // @@protoc_insertion_point(field_list:robogenMessage.SimulatorConf.resources)
  return resources_;
}

// required int32 swarmSize = 32;
bool SimulatorConf::has_swarmsize() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void SimulatorConf::set_has_swarmsize() {
  _has_bits_[0] |= 0x80000000u;
}
void SimulatorConf::clear_has_swarmsize() {
  _has_bits_[0] &= ~0x80000000u;
}
void SimulatorConf::clear_swarmsize() {
  swarmsize_ = 0;
  clear_has_swarmsize();
}
 ::google::protobuf::int32 SimulatorConf::swarmsize() const {
  // @@protoc_insertion_point(field_get:robogenMessage.SimulatorConf.swarmSize)
  return swarmsize_;
}
 void SimulatorConf::set_swarmsize(::google::protobuf::int32 value) {
  set_has_swarmsize();
  swarmsize_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.SimulatorConf.swarmSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationRequest::kRobotFieldNumber;
const int EvaluationRequest::kConfigurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationRequest::EvaluationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationRequest)
}

void EvaluationRequest::InitAsDefaultInstance() {
  robot_ = const_cast< ::robogenMessage::Robot*>(&::robogenMessage::Robot::default_instance());
  configuration_ = const_cast< ::robogenMessage::SimulatorConf*>(&::robogenMessage::SimulatorConf::default_instance());
}

EvaluationRequest::EvaluationRequest(const EvaluationRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationRequest)
}

void EvaluationRequest::SharedCtor() {
  _cached_size_ = 0;
  robot_ = NULL;
  configuration_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvaluationRequest::~EvaluationRequest() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationRequest)
  SharedDtor();
}

void EvaluationRequest::SharedDtor() {
  if (this != default_instance_) {
    delete robot_;
    delete configuration_;
  }
}

void EvaluationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvaluationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvaluationRequest_descriptor_;
}

const EvaluationRequest& EvaluationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvaluationRequest* EvaluationRequest::default_instance_ = NULL;

EvaluationRequest* EvaluationRequest::New(::google::protobuf::Arena* arena) const {
  EvaluationRequest* n = new EvaluationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvaluationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvaluationRequest)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_robot()) {
      if (robot_ != NULL) robot_->::robogenMessage::Robot::Clear();
    }
    if (has_configuration()) {
      if (configuration_ != NULL) configuration_->::robogenMessage::SimulatorConf::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EvaluationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .robogenMessage.Robot robot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_robot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_configuration;
        break;
      }

      // required .robogenMessage.SimulatorConf configuration = 2;
      case 2: {
        if (tag == 18) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configuration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationRequest)
  return false;
#undef DO_
}

void EvaluationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationRequest)
  // required .robogenMessage.Robot robot = 1;
  if (has_robot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->robot_, output);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (has_configuration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->configuration_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationRequest)
}

::google::protobuf::uint8* EvaluationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationRequest)
  // required .robogenMessage.Robot robot = 1;
  if (has_robot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->robot_, false, target);
  }

  // required .robogenMessage.SimulatorConf configuration = 2;
  if (has_configuration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->configuration_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationRequest)
  return target;
}

int EvaluationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.EvaluationRequest)
  int total_size = 0;

  if (has_robot()) {
    // required .robogenMessage.Robot robot = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->robot_);
  }

  if (has_configuration()) {
    // required .robogenMessage.SimulatorConf configuration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->configuration_);
  }

  return total_size;
}
int EvaluationRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvaluationRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .robogenMessage.Robot robot = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->robot_);

    // required .robogenMessage.SimulatorConf configuration = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->configuration_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvaluationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvaluationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EvaluationRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvaluationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvaluationRequest)
    MergeFrom(*source);
  }
}

void EvaluationRequest::MergeFrom(const EvaluationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvaluationRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_robot()) {
      mutable_robot()->::robogenMessage::Robot::MergeFrom(from.robot());
    }
    if (from.has_configuration()) {
      mutable_configuration()->::robogenMessage::SimulatorConf::MergeFrom(from.configuration());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EvaluationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvaluationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationRequest::CopyFrom(const EvaluationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvaluationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_robot()) {
    if (!this->robot_->IsInitialized()) return false;
  }
  if (has_configuration()) {
    if (!this->configuration_->IsInitialized()) return false;
  }
  return true;
}

void EvaluationRequest::Swap(EvaluationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationRequest::InternalSwap(EvaluationRequest* other) {
  std::swap(robot_, other->robot_);
  std::swap(configuration_, other->configuration_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvaluationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvaluationRequest_descriptor_;
  metadata.reflection = EvaluationRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvaluationRequest

// required .robogenMessage.Robot robot = 1;
bool EvaluationRequest::has_robot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EvaluationRequest::set_has_robot() {
  _has_bits_[0] |= 0x00000001u;
}
void EvaluationRequest::clear_has_robot() {
  _has_bits_[0] &= ~0x00000001u;
}
void EvaluationRequest::clear_robot() {
  if (robot_ != NULL) robot_->::robogenMessage::Robot::Clear();
  clear_has_robot();
}
const ::robogenMessage::Robot& EvaluationRequest::robot() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationRequest.robot)
  return robot_ != NULL ? *robot_ : *default_instance_->robot_;
}
::robogenMessage::Robot* EvaluationRequest::mutable_robot() {
  set_has_robot();
  if (robot_ == NULL) {
    robot_ = new ::robogenMessage::Robot;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.EvaluationRequest.robot)
  return robot_;
}
::robogenMessage::Robot* EvaluationRequest::release_robot() {
  // @@protoc_insertion_point(field_release:robogenMessage.EvaluationRequest.robot)
  clear_has_robot();
  ::robogenMessage::Robot* temp = robot_;
  robot_ = NULL;
  return temp;
}
void EvaluationRequest::set_allocated_robot(::robogenMessage::Robot* robot) {
  delete robot_;
  robot_ = robot;
  if (robot) {
    set_has_robot();
  } else {
    clear_has_robot();
  }
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.EvaluationRequest.robot)
}

// required .robogenMessage.SimulatorConf configuration = 2;
bool EvaluationRequest::has_configuration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EvaluationRequest::set_has_configuration() {
  _has_bits_[0] |= 0x00000002u;
}
void EvaluationRequest::clear_has_configuration() {
  _has_bits_[0] &= ~0x00000002u;
}
void EvaluationRequest::clear_configuration() {
  if (configuration_ != NULL) configuration_->::robogenMessage::SimulatorConf::Clear();
  clear_has_configuration();
}
const ::robogenMessage::SimulatorConf& EvaluationRequest::configuration() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationRequest.configuration)
  return configuration_ != NULL ? *configuration_ : *default_instance_->configuration_;
}
::robogenMessage::SimulatorConf* EvaluationRequest::mutable_configuration() {
  set_has_configuration();
  if (configuration_ == NULL) {
    configuration_ = new ::robogenMessage::SimulatorConf;
  }
  // @@protoc_insertion_point(field_mutable:robogenMessage.EvaluationRequest.configuration)
  return configuration_;
}
::robogenMessage::SimulatorConf* EvaluationRequest::release_configuration() {
  // @@protoc_insertion_point(field_release:robogenMessage.EvaluationRequest.configuration)
  clear_has_configuration();
  ::robogenMessage::SimulatorConf* temp = configuration_;
  configuration_ = NULL;
  return temp;
}
void EvaluationRequest::set_allocated_configuration(::robogenMessage::SimulatorConf* configuration) {
  delete configuration_;
  configuration_ = configuration;
  if (configuration) {
    set_has_configuration();
  } else {
    clear_has_configuration();
  }
  // @@protoc_insertion_point(field_set_allocated:robogenMessage.EvaluationRequest.configuration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EvaluationResult::kIdFieldNumber;
const int EvaluationResult::kFitnessFieldNumber;
const int EvaluationResult::kObjectivesFieldNumber;
const int EvaluationResult::kEndPosXFieldNumber;
const int EvaluationResult::kEndPosYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EvaluationResult::EvaluationResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:robogenMessage.EvaluationResult)
}

void EvaluationResult::InitAsDefaultInstance() {
}

EvaluationResult::EvaluationResult(const EvaluationResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:robogenMessage.EvaluationResult)
}

void EvaluationResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  fitness_ = 0;
  endposx_ = 0;
  endposy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EvaluationResult::~EvaluationResult() {
  // @@protoc_insertion_point(destructor:robogenMessage.EvaluationResult)
  SharedDtor();
}

void EvaluationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EvaluationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EvaluationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EvaluationResult_descriptor_;
}

const EvaluationResult& EvaluationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_robogen_2eproto();
  return *default_instance_;
}

EvaluationResult* EvaluationResult::default_instance_ = NULL;

EvaluationResult* EvaluationResult::New(::google::protobuf::Arena* arena) const {
  EvaluationResult* n = new EvaluationResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EvaluationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:robogenMessage.EvaluationResult)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EvaluationResult, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EvaluationResult*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, fitness_);
  ZR_(endposx_, endposy_);

#undef ZR_HELPER_
#undef ZR_

  objectives_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EvaluationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robogenMessage.EvaluationResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_fitness;
        break;
      }

      // required float fitness = 2;
      case 2: {
        if (tag == 21) {
         parse_fitness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fitness_)));
          set_has_fitness();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_objectives;
        break;
      }

      // repeated float objectives = 3;
      case 3: {
        if (tag == 29) {
         parse_objectives:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_objectives())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_objectives())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_objectives;
        if (input->ExpectTag(37)) goto parse_endPosX;
        break;
      }

      // required float endPosX = 4;
      case 4: {
        if (tag == 37) {
         parse_endPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endposx_)));
          set_has_endposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_endPosY;
        break;
      }

      // required float endPosY = 5;
      case 5: {
        if (tag == 45) {
         parse_endPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endposy_)));
          set_has_endposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robogenMessage.EvaluationResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robogenMessage.EvaluationResult)
  return false;
#undef DO_
}

void EvaluationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robogenMessage.EvaluationResult)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required float fitness = 2;
  if (has_fitness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fitness(), output);
  }

  // repeated float objectives = 3;
  for (int i = 0; i < this->objectives_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->objectives(i), output);
  }

  // required float endPosX = 4;
  if (has_endposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->endposx(), output);
  }

  // required float endPosY = 5;
  if (has_endposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->endposy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robogenMessage.EvaluationResult)
}

::google::protobuf::uint8* EvaluationResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:robogenMessage.EvaluationResult)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required float fitness = 2;
  if (has_fitness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fitness(), target);
  }

  // repeated float objectives = 3;
  for (int i = 0; i < this->objectives_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->objectives(i), target);
  }

  // required float endPosX = 4;
  if (has_endposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->endposx(), target);
  }

  // required float endPosY = 5;
  if (has_endposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->endposy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robogenMessage.EvaluationResult)
  return target;
}

int EvaluationResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:robogenMessage.EvaluationResult)
  int total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_fitness()) {
    // required float fitness = 2;
    total_size += 1 + 4;
  }

  if (has_endposx()) {
    // required float endPosX = 4;
    total_size += 1 + 4;
  }

  if (has_endposy()) {
    // required float endPosY = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
int EvaluationResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:robogenMessage.EvaluationResult)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float fitness = 2;
    total_size += 1 + 4;

    // required float endPosX = 4;
    total_size += 1 + 4;

    // required float endPosY = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float objectives = 3;
  {
    int data_size = 0;
    data_size = 4 * this->objectives_size();
    total_size += 1 * this->objectives_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EvaluationResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robogenMessage.EvaluationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EvaluationResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EvaluationResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robogenMessage.EvaluationResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robogenMessage.EvaluationResult)
    MergeFrom(*source);
  }
}

void EvaluationResult::MergeFrom(const EvaluationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robogenMessage.EvaluationResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  objectives_.MergeFrom(from.objectives_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_fitness()) {
      set_fitness(from.fitness());
    }
    if (from.has_endposx()) {
      set_endposx(from.endposx());
    }
    if (from.has_endposy()) {
      set_endposy(from.endposy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EvaluationResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robogenMessage.EvaluationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EvaluationResult::CopyFrom(const EvaluationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robogenMessage.EvaluationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EvaluationResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  return true;
}

void EvaluationResult::Swap(EvaluationResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EvaluationResult::InternalSwap(EvaluationResult* other) {
  std::swap(id_, other->id_);
  std::swap(fitness_, other->fitness_);
  objectives_.UnsafeArenaSwap(&other->objectives_);
  std::swap(endposx_, other->endposx_);
  std::swap(endposy_, other->endposy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EvaluationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EvaluationResult_descriptor_;
  metadata.reflection = EvaluationResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EvaluationResult

// required int32 id = 1;
bool EvaluationResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EvaluationResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EvaluationResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EvaluationResult::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 EvaluationResult::id() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.id)
  return id_;
}
 void EvaluationResult::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.id)
}

// required float fitness = 2;
bool EvaluationResult::has_fitness() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EvaluationResult::set_has_fitness() {
  _has_bits_[0] |= 0x00000002u;
}
void EvaluationResult::clear_has_fitness() {
  _has_bits_[0] &= ~0x00000002u;
}
void EvaluationResult::clear_fitness() {
  fitness_ = 0;
  clear_has_fitness();
}
 float EvaluationResult::fitness() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.fitness)
  return fitness_;
}
 void EvaluationResult::set_fitness(float value) {
  set_has_fitness();
  fitness_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.fitness)
}

// repeated float objectives = 3;
int EvaluationResult::objectives_size() const {
  return objectives_.size();
}
void EvaluationResult::clear_objectives() {
  objectives_.Clear();
}
 float EvaluationResult::objectives(int index) const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.objectives)
  return objectives_.Get(index);
}
 void EvaluationResult::set_objectives(int index, float value) {
  objectives_.Set(index, value);
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.objectives)
}
 void EvaluationResult::add_objectives(float value) {
  objectives_.Add(value);
  // @@protoc_insertion_point(field_add:robogenMessage.EvaluationResult.objectives)
}
 const ::google::protobuf::RepeatedField< float >&
EvaluationResult::objectives() const {
  // @@protoc_insertion_point(field_list:robogenMessage.EvaluationResult.objectives)
  return objectives_;
}
 ::google::protobuf::RepeatedField< float >*
EvaluationResult::mutable_objectives() {
  // @@protoc_insertion_point(field_mutable_list:robogenMessage.EvaluationResult.objectives)
  return &objectives_;
}

// required float endPosX = 4;
bool EvaluationResult::has_endposx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EvaluationResult::set_has_endposx() {
  _has_bits_[0] |= 0x00000008u;
}
void EvaluationResult::clear_has_endposx() {
  _has_bits_[0] &= ~0x00000008u;
}
void EvaluationResult::clear_endposx() {
  endposx_ = 0;
  clear_has_endposx();
}
 float EvaluationResult::endposx() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.endPosX)
  return endposx_;
}
 void EvaluationResult::set_endposx(float value) {
  set_has_endposx();
  endposx_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.endPosX)
}

// required float endPosY = 5;
bool EvaluationResult::has_endposy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EvaluationResult::set_has_endposy() {
  _has_bits_[0] |= 0x00000010u;
}
void EvaluationResult::clear_has_endposy() {
  _has_bits_[0] &= ~0x00000010u;
}
void EvaluationResult::clear_endposy() {
  endposy_ = 0;
  clear_has_endposy();
}
 float EvaluationResult::endposy() const {
  // @@protoc_insertion_point(field_get:robogenMessage.EvaluationResult.endPosY)
  return endposy_;
}
 void EvaluationResult::set_endposy(float value) {
  set_has_endposy();
  endposy_ = value;
  // @@protoc_insertion_point(field_set:robogenMessage.EvaluationResult.endPosY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace robogenMessage

// @@protoc_insertion_point(global_scope)
